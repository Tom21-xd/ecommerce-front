{
  "src": {
    "app": {
      "addresses": {
        "page.tsx": "\"use client\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { AddressesService } from \"@/service/addresses/addresses.service\";\r\nimport type { Address } from \"@/lib/types\";\r\nimport { toast } from \"sonner\";\r\n\r\ntype FormAddress = {\r\n  fullName: string;\r\n  phone: string;\r\n  line1: string;\r\n  line2?: string;\r\n  city: string;\r\n  state?: string;\r\n  country: string;\r\n  zip?: string;\r\n  isDefault?: boolean;\r\n};\r\n\r\nconst empty: FormAddress = {\r\n  fullName: \"\",\r\n  phone: \"\",\r\n  line1: \"\",\r\n  line2: \"\",\r\n  city: \"\",\r\n  state: \"\",\r\n  country: \"CO\",\r\n  zip: \"\",\r\n  isDefault: false,\r\n};\r\n\r\nexport default function AddressesPage() {\r\n  const [rows, setRows] = useState<Address[]>([]);\r\n  const [form, setForm] = useState<FormAddress>({ ...empty });\r\n  const [editing, setEditing] = useState<Address | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [saving, setSaving] = useState(false);\r\n\r\n  async function load() {\r\n    setLoading(true);\r\n    try {\r\n      const res = await AddressesService.list(); // -> Address[]\r\n      setRows(res ?? []);\r\n    } catch (e: any) {\r\n      toast.error(e.message || \"No se pudieron cargar las direcciones\");\r\n      setRows([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    load();\r\n  }, []);\r\n\r\n  function setField<K extends keyof FormAddress>(k: K, v: FormAddress[K]) {\r\n    setForm((p) => ({ ...p, [k]: v }));\r\n  }\r\n\r\n  async function save(e: React.FormEvent) {\r\n    e.preventDefault();\r\n    if (saving) return;\r\n    setSaving(true);\r\n    try {\r\n      if (editing) {\r\n        await AddressesService.update(editing.id, form);\r\n        toast.success(\"Dirección actualizada\");\r\n      } else {\r\n        await AddressesService.create(form);\r\n        toast.success(\"Dirección creada\");\r\n      }\r\n      setForm({ ...empty });\r\n      setEditing(null);\r\n      await load();\r\n    } catch (e: any) {\r\n      toast.error(e.message || \"Error guardando la dirección\");\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  }\r\n\r\n  async function remove(id: number) {\r\n    if (!confirm(\"¿Eliminar dirección?\")) return;\r\n    try {\r\n      await AddressesService.remove(id);\r\n      toast.success(\"Eliminada\");\r\n      await load();\r\n    } catch (e: any) {\r\n      toast.error(e.message || \"No se pudo eliminar\");\r\n    }\r\n  }\r\n\r\n  function edit(a: Address) {\r\n    setEditing(a);\r\n    setForm({\r\n      fullName: a.fullName,\r\n      phone: a.phone,\r\n      line1: a.line1,\r\n      line2: a.line2 ?? \"\",\r\n      city: a.city,\r\n      state: a.state ?? \"\",\r\n      country: a.country,\r\n      zip: a.zip ?? \"\",\r\n      isDefault: a.isDefault,\r\n    });\r\n    // Opcional: scroll al formulario\r\n    // window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n  }\r\n\r\n  return (\r\n    <section className=\"space-y-6\">\r\n      <h1 className=\"text-xl font-semibold\">Direcciones</h1>\r\n\r\n      <form onSubmit={save} className=\"grid grid-cols-1 sm:grid-cols-2 gap-3 rounded-xl border bg-white p-4\">\r\n        <input\r\n          className=\"border rounded-md px-3 py-2\"\r\n          placeholder=\"Nombre completo\"\r\n          value={form.fullName}\r\n          onChange={(e) => setField(\"fullName\", e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          className=\"border rounded-md px-3 py-2\"\r\n          placeholder=\"Teléfono\"\r\n          value={form.phone}\r\n          onChange={(e) => setField(\"phone\", e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          className=\"border rounded-md px-3 py-2 sm:col-span-2\"\r\n          placeholder=\"Dirección 1\"\r\n          value={form.line1}\r\n          onChange={(e) => setField(\"line1\", e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          className=\"border rounded-md px-3 py-2 sm:col-span-2\"\r\n          placeholder=\"Dirección 2 (opcional)\"\r\n          value={form.line2}\r\n          onChange={(e) => setField(\"line2\", e.target.value)}\r\n        />\r\n        <input\r\n          className=\"border rounded-md px-3 py-2\"\r\n          placeholder=\"Ciudad\"\r\n          value={form.city}\r\n          onChange={(e) => setField(\"city\", e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          className=\"border rounded-md px-3 py-2\"\r\n          placeholder=\"Departamento\"\r\n          value={form.state}\r\n          onChange={(e) => setField(\"state\", e.target.value)}\r\n        />\r\n        <input\r\n          className=\"border rounded-md px-3 py-2\"\r\n          placeholder=\"País\"\r\n          value={form.country}\r\n          onChange={(e) => setField(\"country\", e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          className=\"border rounded-md px-3 py-2\"\r\n          placeholder=\"ZIP\"\r\n          value={form.zip}\r\n          onChange={(e) => setField(\"zip\", e.target.value)}\r\n        />\r\n        <label className=\"inline-flex items-center gap-2 text-sm sm:col-span-2\">\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={Boolean(form.isDefault)}\r\n            onChange={(e) => setField(\"isDefault\", e.target.checked)}\r\n          />\r\n          Usar como dirección principal\r\n        </label>\r\n        <div className=\"sm:col-span-2 flex gap-2\">\r\n          <button\r\n            disabled={saving}\r\n            className=\"rounded-md bg-black text-white px-4 py-2\"\r\n          >\r\n            {editing ? (saving ? \"Actualizando...\" : \"Actualizar\") : (saving ? \"Creando...\" : \"Crear\")}\r\n          </button>\r\n          {editing && (\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                setEditing(null);\r\n                setForm({ ...empty });\r\n              }}\r\n              className=\"rounded-md border px-4 py-2\"\r\n            >\r\n              Cancelar\r\n            </button>\r\n          )}\r\n        </div>\r\n      </form>\r\n\r\n      {loading && <p>Cargando…</p>}\r\n\r\n      {!loading && rows.length > 0 && (\r\n        <table className=\"w-full text-sm border bg-white\">\r\n          <thead className=\"bg-neutral-100\">\r\n            <tr>\r\n              <th className=\"p-2 border text-left\">Nombre</th>\r\n              <th className=\"p-2 border\">Ciudad</th>\r\n              <th className=\"p-2 border\">País</th>\r\n              <th className=\"p-2 border\">Default</th>\r\n              <th className=\"p-2 border\"></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {rows.map((a) => (\r\n              <tr key={a.id}>\r\n                <td className=\"p-2 border\">\r\n                  {a.fullName} — {a.line1}\r\n                </td>\r\n                <td className=\"p-2 border text-center\">{a.city}</td>\r\n                <td className=\"p-2 border text-center\">{a.country}</td>\r\n                <td className=\"p-2 border text-center\">{a.isDefault ? \"Sí\" : \"No\"}</td>\r\n                <td className=\"p-2 border text-right\">\r\n                  <div className=\"inline-flex gap-2\">\r\n                    <button className=\"px-2 py-1 border rounded\" onClick={() => edit(a)}>\r\n                      Editar\r\n                    </button>\r\n                    <button className=\"px-2 py-1 border rounded\" onClick={() => remove(a.id)}>\r\n                      Eliminar\r\n                    </button>\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n\r\n      {!loading && rows.length === 0 && (\r\n        <div className=\"rounded-xl border bg-white p-6 text-neutral-600\">\r\n          No tienes direcciones creadas.\r\n        </div>\r\n      )}\r\n    </section>\r\n  );\r\n}\r\n"
      },
      "admin": {
        "brands": {
          "page.tsx": "\"use client\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { CatalogService } from \"@/service/catalog/catalog.service\";\r\nimport type { Marca } from \"@/lib/types\";\r\nimport { toast } from \"sonner\";\r\nimport SectionHeader from \"@/components/admin/sectionHeader\";\r\nimport KpiCard from \"@/components/admin/kpiCard\";\r\nimport { RefreshCcw } from \"lucide-react\";\r\n\r\nexport default function AdminBrandsPage() {\r\n  const [rows, setRows] = useState<Marca[]>([]);\r\n  const [nombre, setNombre] = useState(\"\");\r\n  const [loading, setLoading] = useState(true);\r\n  const [saving, setSaving] = useState(false);\r\n\r\n  async function load() {\r\n    setLoading(true);\r\n    try {\r\n      setRows((await CatalogService.listMarca()) ?? []);\r\n    } catch (e: any) {\r\n      toast.error(e.message || \"No se pudieron cargar marcas\");\r\n      setRows([]);\r\n    } finally { setLoading(false); }\r\n  }\r\n\r\n  useEffect(()=>{ load(); },[]);\r\n\r\n  async function save(e: React.FormEvent) {\r\n    e.preventDefault();\r\n    if (!nombre.trim()) return toast.error(\"Nombre requerido\");\r\n    setSaving(true);\r\n    try {\r\n      await CatalogService.createMarca({ nombre });\r\n      setNombre(\"\");\r\n      toast.success(\"Marca creada\");\r\n      await load();\r\n    } catch (e: any) {\r\n      toast.error(e.message || \"Error creando marca\");\r\n    } finally { setSaving(false); }\r\n  }\r\n\r\n  return (\r\n    <section className=\"space-y-6\">\r\n      <SectionHeader\r\n        title=\"Marcas\"\r\n        subtitle=\"Catálogo de fabricantes/marcas.\"\r\n        right={\r\n          <button onClick={load} className=\"inline-flex items-center gap-2 rounded-md border bg-white px-3 py-2 text-sm hover:bg-neutral-100\">\r\n            <RefreshCcw className=\"h-4 w-4\" /> Refrescar\r\n          </button>\r\n        }\r\n      />\r\n\r\n      <div className=\"grid grid-cols-1 gap-4 md:grid-cols-4\">\r\n        <KpiCard label=\"Total marcas\" value={rows.length} />\r\n      </div>\r\n\r\n      <form onSubmit={save} className=\"grid grid-cols-1 sm:grid-cols-[1fr_auto] gap-3 rounded-xl border bg-white p-4\">\r\n        <input className=\"border rounded-md px-3 py-2\" placeholder=\"Nombre de la marca\" value={nombre} onChange={e=>setNombre(e.target.value)} />\r\n        <button disabled={saving} className=\"rounded-md bg-black text-white px-4 py-2\">\r\n          {saving ? \"Guardando…\" : \"Crear\"}\r\n        </button>\r\n      </form>\r\n\r\n      <div className=\"rounded-xl border bg-white overflow-x-auto\">\r\n        <table className=\"w-full text-sm\">\r\n          <thead className=\"bg-neutral-100\">\r\n            <tr>\r\n              <th className=\"p-2 text-left\">ID</th>\r\n              <th className=\"p-2 text-left\">Nombre</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {loading && <tr><td colSpan={2} className=\"p-4 text-center text-neutral-600\">Cargando…</td></tr>}\r\n            {!loading && rows.length === 0 && <tr><td colSpan={2} className=\"p-6 text-center text-neutral-600\">Aún no hay marcas.</td></tr>}\r\n            {!loading && rows.map(m=>(\r\n              <tr key={m.id} className=\"hover:bg-neutral-50\">\r\n                <td className=\"p-2 border-t\">{m.id}</td>\r\n                <td className=\"p-2 border-t\">{m.nombre}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n"
        },
        "categories": {
          "page.tsx": "\"use client\";\r\n\r\nimport { useEffect, useMemo, useState } from \"react\";\r\nimport { CatalogService } from \"@/service/catalog/catalog.service\";\r\nimport type { Category } from \"@/lib/types\";\r\nimport { toast } from \"sonner\";\r\nimport SectionHeader from \"@/components/admin/sectionHeader\";\r\nimport KpiCard from \"@/components/admin/kpiCard\";\r\nimport ChartCard from \"@/components/admin/chartCard\";\r\nimport { RefreshCcw } from \"lucide-react\";\r\nimport { ResponsiveContainer, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip } from \"recharts\";\r\n\r\nfunction slugify(s: string) {\r\n  return s.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\")\r\n    .toLowerCase().trim()\r\n    .replace(/[^a-z0-9\\s-]/g, \"\")\r\n    .replace(/\\s+/g, \"-\").replace(/-+/g, \"-\");\r\n}\r\n\r\nexport default function AdminCategoriesPage() {\r\n  const [rows, setRows] = useState<Category[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const [name, setName] = useState(\"\");\r\n  const [slug, setSlug] = useState(\"\");\r\n  const [parentId, setParentId] = useState<number|undefined>(undefined);\r\n  const [saving, setSaving] = useState(false);\r\n\r\n  async function load() {\r\n    setLoading(true);\r\n    try {\r\n      const res = await CatalogService.listCategories();\r\n      setRows(res ?? []);\r\n    } catch (e: any) {\r\n      toast.error(e.message || \"No se pudieron cargar categorías\");\r\n      setRows([]);\r\n    } finally { setLoading(false); }\r\n  }\r\n\r\n  useEffect(()=>{ load(); },[]);\r\n  useEffect(()=>{ setSlug(slugify(name)); },[name]);\r\n\r\n  const kpi = useMemo(() => {\r\n    const topLevel = rows.filter(c => !c.parentId).length;\r\n    const children = rows.length - topLevel;\r\n    return { total: rows.length, topLevel, children };\r\n  }, [rows]);\r\n\r\n  const bars = useMemo(() => {\r\n    // cuenta hijos por padre (solo top-level)\r\n    const map = new Map<number, { name: string; count: number }>();\r\n    rows.forEach(c => {\r\n      if (!c.parentId) {\r\n        map.set(c.id, { name: c.name, count: 0 });\r\n      }\r\n    });\r\n    rows.forEach(c => {\r\n      if (c.parentId && map.has(c.parentId)) {\r\n        map.get(c.parentId)!.count++;\r\n      }\r\n    });\r\n    return Array.from(map.values()).sort((a,b)=>b.count-a.count).slice(0, 12);\r\n  }, [rows]);\r\n\r\n  async function save(e: React.FormEvent) {\r\n    e.preventDefault();\r\n    if (!name || !slug) return toast.error(\"Nombre y slug requeridos\");\r\n    setSaving(true);\r\n    try {\r\n      await CatalogService.createCategory({ name, slug, parentId: parentId || undefined });\r\n      toast.success(\"Categoría creada\");\r\n      setName(\"\"); setSlug(\"\"); setParentId(undefined);\r\n      await load();\r\n    } catch (e: any) {\r\n      toast.error(e.message || \"Error creando categoría\");\r\n    } finally { setSaving(false); }\r\n  }\r\n\r\n  return (\r\n    <section className=\"space-y-6\">\r\n      <SectionHeader\r\n        title=\"Categorías\"\r\n        subtitle=\"Gestión de taxonomía y jerarquías.\"\r\n        right={\r\n          <button onClick={load} className=\"inline-flex items-center gap-2 rounded-md border bg-white px-3 py-2 text-sm hover:bg-neutral-100\">\r\n            <RefreshCcw className=\"h-4 w-4\" /> Refrescar\r\n          </button>\r\n        }\r\n      />\r\n\r\n      {/* KPIs */}\r\n      <div className=\"grid grid-cols-1 gap-4 md:grid-cols-3\">\r\n        <KpiCard label=\"Total\"       value={kpi.total} />\r\n        <KpiCard label=\"Nivel 1\"     value={kpi.topLevel} hint=\"Categorías raíz\" />\r\n        <KpiCard label=\"Subcategorías\" value={kpi.children} />\r\n      </div>\r\n\r\n      {/* Form */}\r\n      <form onSubmit={save} className=\"grid grid-cols-1 gap-3 rounded-xl border bg-white p-4 sm:grid-cols-[1fr_1fr_1fr_auto]\">\r\n        <input className=\"border rounded-md px-3 py-2\" placeholder=\"Nombre\" value={name} onChange={e=>setName(e.target.value)} />\r\n        <input className=\"border rounded-md px-3 py-2\" placeholder=\"Slug\" value={slug} onChange={e=>setSlug(e.target.value)} />\r\n        <select className=\"border rounded-md px-3 py-2\" value={parentId ?? 0} onChange={e=>setParentId(Number(e.target.value)||undefined)}>\r\n          <option value={0}>(Sin padre)</option>\r\n          {rows.filter(c => !c.parentId).map(c => (\r\n            <option key={c.id} value={c.id}>{c.name}</option>\r\n          ))}\r\n        </select>\r\n        <button disabled={saving} className=\"rounded-md bg-black text-white px-4 py-2\">\r\n          {saving ? \"Guardando…\" : \"Crear\"}\r\n        </button>\r\n      </form>\r\n\r\n      {/* Chart */}\r\n      <ChartCard title=\"Top categorías (por cantidad de subcategorías)\">\r\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n          <BarChart data={bars} margin={{ left: 8, right: 8 }}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"name\" tick={{ fontSize: 12 }} />\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Bar dataKey=\"count\" name=\"Subcategorías\" fill=\"#111827\" radius={[6,6,0,0]} />\r\n          </BarChart>\r\n        </ResponsiveContainer>\r\n      </ChartCard>\r\n\r\n      {/* Tabla */}\r\n      <div className=\"rounded-xl border bg-white overflow-x-auto\">\r\n        <table className=\"w-full text-sm\">\r\n          <thead className=\"bg-neutral-100\">\r\n            <tr>\r\n              <th className=\"p-2 text-left\">ID</th>\r\n              <th className=\"p-2 text-left\">Nombre</th>\r\n              <th className=\"p-2\">Slug</th>\r\n              <th className=\"p-2\">Padre</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {loading && <tr><td colSpan={4} className=\"p-4 text-center text-neutral-600\">Cargando…</td></tr>}\r\n            {!loading && rows.length === 0 && <tr><td colSpan={4} className=\"p-6 text-center text-neutral-600\">Sin resultados</td></tr>}\r\n            {!loading && rows.map(c => (\r\n              <tr key={c.id} className=\"hover:bg-neutral-50\">\r\n                <td className=\"p-2 border-t\">{c.id}</td>\r\n                <td className=\"p-2 border-t\">{c.name}</td>\r\n                <td className=\"p-2 border-t text-center\">{c.slug}</td>\r\n                <td className=\"p-2 border-t text-center\">\r\n                  {rows.find(r => r.id === (c.parentId ?? -1))?.name ?? \"—\"}\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n"
        },
        "layout.tsx": "\"use client\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { AuthService } from \"@/service/auth/auth.service\";\r\nimport type { User } from \"@/lib/types\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport AdminSidebar from \"@/components/admin/adminSidebar\";\r\n\r\nexport default function AdminLayout({ children }: { children: React.ReactNode }) {\r\n  const router = useRouter();\r\n  const [me, setMe] = useState<User | null>(null);\r\n  const [checking, setChecking] = useState(true);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        const u = await AuthService.validate();\r\n        if (u.role !== \"ADMIN\") {\r\n          router.replace(\"/\");\r\n          return;\r\n        }\r\n        setMe(u);\r\n      } catch {\r\n        router.replace(\"/login\");\r\n      } finally {\r\n        setChecking(false);\r\n      }\r\n    })();\r\n  }, [router]);\r\n\r\n  if (checking) {\r\n    return (\r\n      <div className=\"mx-auto max-w-7xl px-4 py-10 text-sm text-neutral-600\">\r\n        Verificando permisos…\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"mx-auto max-w-7xl px-4 py-6 grid grid-cols-1 gap-4 md:grid-cols-[auto_1fr]\">\r\n      <AdminSidebar />\r\n      <div className=\"min-w-0\">{children}</div>\r\n    </div>\r\n  );\r\n}\r\n",
        "page.tsx": "\"use client\";\r\n\r\nimport Link from \"next/link\";\r\n\r\nexport default function AdminHome() {\r\n  const cards = [\r\n    { href: \"/admin/users\", title: \"Usuarios\", desc: \"Gestión por rol, altas/bajas.\" },\r\n    { href: \"/admin/categories\", title: \"Categorías\", desc: \"Taxonomía de productos.\" },\r\n    { href: \"/admin/units\", title: \"Unidades\", desc: \"Unidades de medida (ej. kg, und).\" },\r\n    { href: \"/admin/brands\", title: \"Marcas\", desc: \"Fabricantes/marcas.\" },\r\n  ];\r\n\r\n  return (\r\n    <section className=\"space-y-4\">\r\n      <h1 className=\"text-xl font-semibold\">Panel de administración</h1>\r\n      <ul className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n        {cards.map(c => (\r\n          <li key={c.href} className=\"rounded-xl border bg-white p-4\">\r\n            <h3 className=\"font-semibold\">{c.title}</h3>\r\n            <p className=\"text-sm text-neutral-600\">{c.desc}</p>\r\n            <Link href={c.href} className=\"mt-3 inline-block rounded-md border px-3 py-1.5 text-sm hover:bg-neutral-100\">\r\n              Abrir\r\n            </Link>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </section>\r\n  );\r\n}\r\n",
        "products": {
          "page.tsx": "\"use client\";\r\n\r\nimport { useEffect, useMemo, useState } from \"react\";\r\nimport type { Product } from \"@/lib/types\";\r\nimport { toast } from \"sonner\";\r\nimport { RefreshCcw, Search, Filter, Printer } from \"lucide-react\";\r\nimport {\r\n  ResponsiveContainer,\r\n  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\r\n  PieChart, Pie, Cell,\r\n} from \"recharts\";\r\nimport { ProductsService } from \"@/service/products/product.service\";\r\nimport KpiCard from \"@/components/admin/kpiCard\";\r\nimport ChartCard from \"@/components/admin/chartCard\";\r\n\r\ntype Row = Product & {\r\n  _seller?: string;\r\n  _priceNum: number;\r\n};\r\n\r\nconst COLORS = [\"#111827\", \"#6B7280\", \"#9CA3AF\", \"#D1D5DB\", \"#A78BFA\", \"#60A5FA\", \"#34D399\"];\r\n\r\nexport default function AdminProductsPage() {\r\n  const [rows, setRows] = useState<Row[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [q, setQ] = useState(\"\");\r\n  const [minStock, setMinStock] = useState<number>(0);\r\n\r\n  async function load() {\r\n    setLoading(true);\r\n    try {\r\n      const res = await ProductsService.list({ limit: 500, offset: 0 });\r\n      const list = (res.products ?? []).map((p) => ({\r\n        ...p,\r\n        _seller: p.container?.user?.username || \"—\",\r\n        _priceNum: typeof p.price === \"string\" ? parseFloat(p.price) : Number(p.price ?? 0),\r\n      })) as Row[];\r\n      setRows(list);\r\n    } catch (e: any) {\r\n      toast.error(e.message || \"No se pudieron cargar los productos\");\r\n      setRows([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    load();\r\n  }, []);\r\n\r\n  const filtered = useMemo(() => {\r\n    const query = q.trim().toLowerCase();\r\n    return rows\r\n      .filter((p) => p.quantity >= minStock)\r\n      .filter((p) => {\r\n        if (!query) return true;\r\n        return (\r\n          p.name.toLowerCase().includes(query) ||\r\n          p.sku.toLowerCase().includes(query) ||\r\n          (p._seller ?? \"\").toLowerCase().includes(query)\r\n        );\r\n      })\r\n      .sort((a, b) => b.id - a.id);\r\n  }, [rows, q, minStock]);\r\n\r\n  const kpi = useMemo(() => {\r\n    const total = filtered.length;\r\n    const sellers = new Set(filtered.map((p) => p._seller || \"—\")).size;\r\n    const stock = filtered.reduce((acc, p) => acc + (p.quantity || 0), 0);\r\n    const avgPrice = filtered.length\r\n      ? filtered.reduce((acc, p) => acc + (p._priceNum || 0), 0) / filtered.length\r\n      : 0;\r\n    return { total, sellers, stock, avgPrice };\r\n  }, [filtered]);\r\n\r\n  const bySeller = useMemo(() => {\r\n    const map = new Map<string, number>();\r\n    filtered.forEach((p) => map.set(p._seller || \"—\", (map.get(p._seller || \"—\") || 0) + 1));\r\n    return Array.from(map.entries())\r\n      .map(([seller, count]) => ({ seller, count }))\r\n      .sort((a, b) => b.count - a.count)\r\n      .slice(0, 12);\r\n  }, [filtered]);\r\n\r\n  const priceBuckets = useMemo(() => {\r\n    const buckets = [\r\n      { label: \"≤ 50k\", min: 0, max: 50000 },\r\n      { label: \"50k–200k\", min: 50000, max: 200000 },\r\n      { label: \"200k–500k\", min: 200000, max: 500000 },\r\n      { label: \"≥ 500k\", min: 500000, max: Infinity },\r\n    ];\r\n    return buckets.map((b) => ({\r\n      name: b.label,\r\n      value: filtered.filter((p) => p._priceNum >= b.min && p._priceNum < b.max).length,\r\n    }));\r\n  }, [filtered]);\r\n\r\n  function exportCSV() {\r\n    if (!filtered.length) return toast.message(\"No hay datos para exportar\");\r\n    const head = [\"id\", \"name\", \"sku\", \"price\", \"quantity\", \"seller\"];\r\n    const lines = filtered.map((p) =>\r\n      [p.id, p.name, p.sku, p._priceNum, p.quantity, p._seller].map((v) =>\r\n        typeof v === \"string\" && v.includes(\",\") ? `\"${v.replace(/\"/g, '\"\"')}\"` : String(v)\r\n      ).join(\",\")\r\n    );\r\n    const csv = [head.join(\",\"), ...lines].join(\"\\n\");\r\n    const blob = new Blob([csv], { type: \"text/csv;charset=utf-8\" });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement(\"a\");\r\n    a.href = url; a.download = \"admin_products.csv\";\r\n    a.click();\r\n    URL.revokeObjectURL(url);\r\n  }\r\n\r\n  return (\r\n    <section className=\"space-y-6\">\r\n      <div className=\"flex flex-col gap-3 sm:flex-row sm:items-end sm:justify-between\">\r\n        <div>\r\n          <h1 className=\"text-xl font-semibold\">Productos (Admin)</h1>\r\n          <p className=\"text-sm text-neutral-600\">Vista con métricas, gráficos y tabla filtrable.</p>\r\n        </div>\r\n        <div className=\"flex flex-wrap items-center gap-2\">\r\n          <div className=\"relative\">\r\n            <Search className=\"pointer-events-none absolute left-2 top-2.5 h-4 w-4 text-neutral-500\" />\r\n            <input\r\n              className=\"w-56 rounded-md border bg-white pl-8 pr-3 py-2 text-sm\"\r\n              placeholder=\"Buscar nombre/sku/vendedor\"\r\n              value={q}\r\n              onChange={(e) => setQ(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"relative\">\r\n            <Filter className=\"pointer-events-none absolute left-2 top-2.5 h-4 w-4 text-neutral-500\" />\r\n            <input\r\n              type=\"number\"\r\n              min={0}\r\n              className=\"w-40 rounded-md border bg-white pl-8 pr-3 py-2 text-sm\"\r\n              placeholder=\"Stock mínimo\"\r\n              value={minStock}\r\n              onChange={(e) => setMinStock(Number(e.target.value || 0))}\r\n            />\r\n          </div>\r\n          <button\r\n            onClick={load}\r\n            className=\"inline-flex items-center gap-2 rounded-md border bg-white px-3 py-2 text-sm hover:bg-neutral-100\"\r\n            title=\"Refrescar\"\r\n          >\r\n            <RefreshCcw className=\"h-4 w-4\" />\r\n            Refrescar\r\n          </button>\r\n          <button\r\n            onClick={exportCSV}\r\n            className=\"inline-flex items-center gap-2 rounded-md border bg-white px-3 py-2 text-sm hover:bg-neutral-100\"\r\n            title=\"Exportar CSV\"\r\n          >\r\n            <Printer className=\"h-4 w-4\" />\r\n            Exportar\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 gap-4 md:grid-cols-4\">\r\n        <KpiCard label=\"Productos\" value={kpi.total} />\r\n        <KpiCard label=\"Vendedores\" value={kpi.sellers} />\r\n        <KpiCard label=\"Stock total\" value={kpi.stock} />\r\n        <KpiCard label=\"Precio promedio\" value={Intl.NumberFormat(\"es-CO\", { style: \"currency\", currency: \"COP\" }).format(kpi.avgPrice || 0)} />\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 gap-4 lg:grid-cols-2\">\r\n        <ChartCard title=\"Productos por vendedor (Top 12)\">\r\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n            <BarChart data={bySeller} margin={{ left: 8, right: 8 }}>\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"seller\" tick={{ fontSize: 12 }} />\r\n              <YAxis />\r\n              <Tooltip />\r\n              <Legend />\r\n              <Bar dataKey=\"count\" name=\"Productos\" fill={COLORS[0]} radius={[6, 6, 0, 0]} />\r\n            </BarChart>\r\n          </ResponsiveContainer>\r\n        </ChartCard>\r\n\r\n        <ChartCard title=\"Distribución por rangos de precio\">\r\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n            <PieChart>\r\n              <Tooltip />\r\n              <Legend />\r\n              <Pie\r\n                data={priceBuckets}\r\n                dataKey=\"value\"\r\n                nameKey=\"name\"\r\n                innerRadius={60}\r\n                outerRadius={100}\r\n                paddingAngle={2}\r\n              >\r\n                {priceBuckets.map((_, i) => (\r\n                  <Cell key={i} fill={COLORS[i % COLORS.length]} />\r\n                ))}\r\n              </Pie>\r\n            </PieChart>\r\n          </ResponsiveContainer>\r\n        </ChartCard>\r\n      </div>\r\n\r\n      {/* Tabla */}\r\n      <div className=\"rounded-xl border bg-white p-0 shadow-sm overflow-x-auto\">\r\n        <table className=\"w-full text-sm\">\r\n          <thead className=\"bg-neutral-100\">\r\n            <tr>\r\n              <th className=\"p-2 border-b text-left\">ID</th>\r\n              <th className=\"p-2 border-b text-left\">Nombre</th>\r\n              <th className=\"p-2 border-b\">SKU</th>\r\n              <th className=\"p-2 border-b\">Stock</th>\r\n              <th className=\"p-2 border-b\">Precio</th>\r\n              <th className=\"p-2 border-b text-left\">Vendedor</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {loading && (\r\n              <tr>\r\n                <td colSpan={6} className=\"p-4 text-center text-neutral-600\">Cargando…</td>\r\n              </tr>\r\n            )}\r\n            {!loading && filtered.length === 0 && (\r\n              <tr>\r\n                <td colSpan={6} className=\"p-6 text-center text-neutral-600\">Sin resultados</td>\r\n              </tr>\r\n            )}\r\n            {!loading && filtered.map((p) => (\r\n              <tr key={p.id} className=\"hover:bg-neutral-50\">\r\n                <td className=\"p-2 border-t\">{p.id}</td>\r\n                <td className=\"p-2 border-t\">{p.name}</td>\r\n                <td className=\"p-2 border-t text-center\">{p.sku}</td>\r\n                <td className=\"p-2 border-t text-center\">{p.quantity}</td>\r\n                <td className=\"p-2 border-t text-right\">\r\n                  {Intl.NumberFormat(\"es-CO\", { style: \"currency\", currency: \"COP\" }).format(p._priceNum || 0)}\r\n                </td>\r\n                <td className=\"p-2 border-t\">{p._seller}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n"
        },
        "units": {
          "page.tsx": "\"use client\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { CatalogService } from \"@/service/catalog/catalog.service\";\r\nimport type { Unidad } from \"@/lib/types\";\r\nimport { toast } from \"sonner\";\r\nimport SectionHeader from \"@/components/admin/sectionHeader\";\r\nimport KpiCard from \"@/components/admin/kpiCard\";\r\nimport { RefreshCcw } from \"lucide-react\";\r\n\r\nexport default function AdminUnitsPage() {\r\n  const [rows, setRows] = useState<Unidad[]>([]);\r\n  const [nombre, setNombre] = useState(\"\");\r\n  const [loading, setLoading] = useState(true);\r\n  const [saving, setSaving] = useState(false);\r\n\r\n  async function load() {\r\n    setLoading(true);\r\n    try {\r\n      setRows((await CatalogService.listUnidad()) ?? []);\r\n    } catch (e: any) {\r\n      toast.error(e.message || \"No se pudieron cargar unidades\");\r\n      setRows([]);\r\n    } finally { setLoading(false); }\r\n  }\r\n\r\n  useEffect(()=>{ load(); },[]);\r\n\r\n  async function save(e: React.FormEvent) {\r\n    e.preventDefault();\r\n    if (!nombre.trim()) return toast.error(\"Nombre requerido\");\r\n    setSaving(true);\r\n    try {\r\n      await CatalogService.createUnidad({ nombre });\r\n      setNombre(\"\");\r\n      toast.success(\"Unidad creada\");\r\n      await load();\r\n    } catch (e: any) {\r\n      toast.error(e.message || \"Error creando unidad\");\r\n    } finally { setSaving(false); }\r\n  }\r\n\r\n  return (\r\n    <section className=\"space-y-6\">\r\n      <SectionHeader\r\n        title=\"Unidades\"\r\n        subtitle=\"Unidades de medida para productos.\"\r\n        right={\r\n          <button onClick={load} className=\"inline-flex items-center gap-2 rounded-md border bg-white px-3 py-2 text-sm hover:bg-neutral-100\">\r\n            <RefreshCcw className=\"h-4 w-4\" /> Refrescar\r\n          </button>\r\n        }\r\n      />\r\n\r\n      <div className=\"grid grid-cols-1 gap-4 md:grid-cols-4\">\r\n        <KpiCard label=\"Total unidades\" value={rows.length} />\r\n      </div>\r\n\r\n      <form onSubmit={save} className=\"grid grid-cols-1 sm:grid-cols-[1fr_auto] gap-3 rounded-xl border bg-white p-4\">\r\n        <input className=\"border rounded-md px-3 py-2\" placeholder=\"Nombre de la unidad (ej. und, kg, m)\" value={nombre} onChange={e=>setNombre(e.target.value)} />\r\n        <button disabled={saving} className=\"rounded-md bg-black text-white px-4 py-2\">\r\n          {saving ? \"Guardando…\" : \"Crear\"}\r\n        </button>\r\n      </form>\r\n\r\n      <div className=\"rounded-xl border bg-white overflow-x-auto\">\r\n        <table className=\"w-full text-sm\">\r\n          <thead className=\"bg-neutral-100\">\r\n            <tr>\r\n              <th className=\"p-2 text-left\">ID</th>\r\n              <th className=\"p-2 text-left\">Nombre</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {loading && <tr><td colSpan={2} className=\"p-4 text-center text-neutral-600\">Cargando…</td></tr>}\r\n            {!loading && rows.length === 0 && <tr><td colSpan={2} className=\"p-6 text-center text-neutral-600\">Aún no hay unidades.</td></tr>}\r\n            {!loading && rows.map(u=>(\r\n              <tr key={u.id} className=\"hover:bg-neutral-50\">\r\n                <td className=\"p-2 border-t\">{u.id}</td>\r\n                <td className=\"p-2 border-t\">{u.nombre}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n"
        },
        "users": {
          "page.tsx": "\"use client\";\r\n\r\nimport { useEffect, useMemo, useState } from \"react\";\r\nimport { UsersService } from \"@/service/users/users.service\";\r\nimport type { User } from \"@/lib/types\";\r\nimport { toast } from \"sonner\";\r\nimport { RefreshCcw } from \"lucide-react\";\r\nimport { ResponsiveContainer, PieChart, Pie, Tooltip, Cell, Legend } from \"recharts\";\r\nimport SectionHeader from \"@/components/admin/sectionHeader\";\r\nimport KpiCard from \"@/components/admin/kpiCard\";\r\nimport ChartCard from \"@/components/admin/chartCard\";\r\n\r\nconst COLORS = [\"#111827\", \"#6B7280\", \"#A78BFA\"];\r\n\r\nexport default function AdminUsersPage() {\r\n  const [rows, setRows] = useState<User[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  async function load() {\r\n    setLoading(true);\r\n    try {\r\n      const [admins, sellers, buyers] = await Promise.all([\r\n        UsersService.byRole(\"ADMIN\"),\r\n        UsersService.byRole(\"SELLER\"),\r\n        UsersService.byRole(\"BUYER\"),\r\n      ]);\r\n      setRows([...(admins ?? []), ...(sellers ?? []), ...(buyers ?? [])]);\r\n    } catch (e: any) {\r\n      toast.error(e.message || \"No se pudo cargar usuarios\");\r\n      setRows([]);\r\n    } finally { setLoading(false); }\r\n  }\r\n\r\n  useEffect(()=>{ load(); },[]);\r\n\r\n  const counts = useMemo(() => {\r\n    const c = { ADMIN: 0, SELLER: 0, BUYER: 0 } as Record<\"ADMIN\"|\"SELLER\"|\"BUYER\", number>;\r\n    rows.forEach(u => c[u.role]++);\r\n    return c;\r\n  }, [rows]);\r\n\r\n  const donutData = useMemo(() => ([\r\n    { name: \"ADMIN\", value: counts.ADMIN },\r\n    { name: \"SELLER\", value: counts.SELLER },\r\n    { name: \"BUYER\",  value: counts.BUYER },\r\n  ]), [counts]);\r\n\r\n  return (\r\n    <section className=\"space-y-6\">\r\n      <SectionHeader\r\n        title=\"Usuarios\"\r\n        subtitle=\"Distribución por rol y listado general.\"\r\n        right={\r\n          <button onClick={load} className=\"inline-flex items-center gap-2 rounded-md border bg-white px-3 py-2 text-sm hover:bg-neutral-100\">\r\n            <RefreshCcw className=\"h-4 w-4\" /> Refrescar\r\n          </button>\r\n        }\r\n      />\r\n\r\n      <div className=\"grid grid-cols-1 gap-4 md:grid-cols-4\">\r\n        <KpiCard label=\"Total\"     value={rows.length} />\r\n        <KpiCard label=\"Admins\"    value={counts.ADMIN} />\r\n        <KpiCard label=\"Sellers\"   value={counts.SELLER} />\r\n        <KpiCard label=\"Buyers\"    value={counts.BUYER} />\r\n      </div>\r\n\r\n      <ChartCard title=\"Usuarios por rol\">\r\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n          <PieChart>\r\n            <Tooltip />\r\n            <Legend />\r\n            <Pie data={donutData} dataKey=\"value\" nameKey=\"name\" innerRadius={60} outerRadius={100} paddingAngle={2}>\r\n              {donutData.map((_, i) => <Cell key={i} fill={COLORS[i % COLORS.length]} />)}\r\n            </Pie>\r\n          </PieChart>\r\n        </ResponsiveContainer>\r\n      </ChartCard>\r\n\r\n      <div className=\"rounded-xl border bg-white overflow-x-auto\">\r\n        <table className=\"w-full text-sm\">\r\n          <thead className=\"bg-neutral-100\">\r\n            <tr>\r\n              <th className=\"p-2 text-left\">ID</th>\r\n              <th className=\"p-2 text-left\">Usuario</th>\r\n              <th className=\"p-2 text-left\">Email</th>\r\n              <th className=\"p-2\">Rol</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {loading && <tr><td colSpan={4} className=\"p-4 text-center text-neutral-600\">Cargando…</td></tr>}\r\n            {!loading && rows.length===0 && <tr><td colSpan={4} className=\"p-6 text-center text-neutral-600\">Sin resultados</td></tr>}\r\n            {!loading && rows.map(u=>(\r\n              <tr key={u.id} className=\"hover:bg-neutral-50\">\r\n                <td className=\"p-2 border-t\">{u.id}</td>\r\n                <td className=\"p-2 border-t\">{u.username}</td>\r\n                <td className=\"p-2 border-t\">{u.email}</td>\r\n                <td className=\"p-2 border-t text-center\">{u.role}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n"
        }
      },
      "cart": {
        "page.tsx": "\"use client\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { CartService } from \"@/service/cart/cart.service\";\r\nimport type { Cart, CartItem } from \"@/lib/types\";\r\nimport { toast } from \"sonner\";\r\nimport Link from \"next/link\";\r\n\r\nexport default function CartPage() {\r\n  const [cart,setCart]=useState<Cart|null>(null);\r\n  const [loading,setLoading]=useState(true);\r\n\r\n  async function load(){\r\n    setLoading(true);\r\n    try{\r\n      const c = await CartService.get();\r\n      setCart(c);\r\n    }catch(e:any){\r\n      toast.error(e.message || \"No se pudo cargar el carrito\");\r\n    }finally{ setLoading(false); }\r\n  }\r\n\r\n  useEffect(()=>{ load(); },[]);\r\n\r\n  async function changeQty(it: CartItem, qty: number){\r\n    try{\r\n      await CartService.updateItem(it.productId, { qty });\r\n      await load();\r\n    }catch(e:any){ toast.error(e.message); }\r\n  }\r\n  async function remove(it: CartItem){\r\n    try{\r\n      await CartService.removeItem(it.productId);\r\n      await load();\r\n    }catch(e:any){ toast.error(e.message); }\r\n  }\r\n\r\n  const items = cart?.items ?? [];\r\n  const total = items.reduce((acc,it)=>acc + Number(it.priceAtAdd)*it.qty, 0);\r\n\r\n  return (\r\n    <section className=\"space-y-4\">\r\n      <h1 className=\"text-xl font-semibold\">Carrito</h1>\r\n      {loading && <p>Cargando…</p>}\r\n      {!loading && items.length === 0 && (\r\n        <div className=\"rounded-xl border bg-white p-6 text-neutral-600\">Tu carrito está vacío.</div>\r\n      )}\r\n      {!loading && items.length > 0 && (\r\n        <>\r\n          <table className=\"w-full text-sm border bg-white\">\r\n            <thead className=\"bg-neutral-100\">\r\n              <tr>\r\n                <th className=\"p-2 border text-left\">Producto</th>\r\n                <th className=\"p-2 border\">Precio</th>\r\n                <th className=\"p-2 border\">Cantidad</th>\r\n                <th className=\"p-2 border\">Subtotal</th>\r\n                <th className=\"p-2 border\"></th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {items.map(it=>(\r\n                <tr key={it.id}>\r\n                  <td className=\"p-2 border\">{it.product?.name ?? it.productId}</td>\r\n                  <td className=\"p-2 border text-right\">${Number(it.priceAtAdd).toLocaleString()}</td>\r\n                  <td className=\"p-2 border text-center\">\r\n                    <div className=\"inline-flex items-center gap-2\">\r\n                      <button className=\"px-2 border rounded\" onClick={()=>changeQty(it, Math.max(0,it.qty-1))}>-</button>\r\n                      <span>{it.qty}</span>\r\n                      <button className=\"px-2 border rounded\" onClick={()=>changeQty(it, it.qty+1)}>+</button>\r\n                    </div>\r\n                  </td>\r\n                  <td className=\"p-2 border text-right\">\r\n                    ${(Number(it.priceAtAdd)*it.qty).toLocaleString()}\r\n                  </td>\r\n                  <td className=\"p-2 border text-center\">\r\n                    <button className=\"px-2 py-1 border rounded\" onClick={()=>remove(it)}>Quitar</button>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n\r\n          <div className=\"flex items-center justify-end gap-4\">\r\n            <div className=\"text-right\">\r\n              <div className=\"text-sm text-neutral-500\">Total</div>\r\n              <div className=\"text-xl font-semibold\">${total.toLocaleString()}</div>\r\n            </div>\r\n            <Link href=\"/checkout\" className=\"rounded-md bg-black text-white px-4 py-2\">Ir a pagar</Link>\r\n          </div>\r\n        </>\r\n      )}\r\n    </section>\r\n  );\r\n}\r\n"
      },
      "checkout": {
        "page.tsx": "\"use client\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { AddressesService } from \"@/service/addresses/addresses.service\";\r\nimport { CartService } from \"@/service/cart/cart.service\";\r\nimport type { Address } from \"@/lib/types\";\r\nimport { toast } from \"sonner\";\r\nimport { useRouter } from \"next/navigation\";\r\n\r\nexport default function CheckoutPage() {\r\n  const router = useRouter();\r\n  const [addresses,setAddresses]=useState<Address[]>([]);\r\n  const [selected,setSelected]=useState<number|undefined>(undefined);\r\n  const [loading,setLoading]=useState(true);\r\n\r\n  async function load(){\r\n    setLoading(true);\r\n    try{\r\n      const res = await AddressesService.list();\r\n      setAddresses(res);\r\n      const def = res.find(a=>a.isDefault);\r\n      setSelected(def?.id ?? res[0]?.id);\r\n    }catch(e:any){ toast.error(e.message); }\r\n    finally{ setLoading(false); }\r\n  }\r\n  useEffect(()=>{ load(); },[]);\r\n\r\n  async function pay() {\r\n    if(!selected){ toast.error(\"Selecciona una dirección\"); return; }\r\n    try{\r\n      await CartService.checkout({ addressId: selected });\r\n      toast.success(\"Pedido creado\");\r\n      router.push(\"/\");\r\n    }catch(e:any){ toast.error(e.message || \"Error en checkout\"); }\r\n  }\r\n\r\n  return (\r\n    <section className=\"space-y-4\">\r\n      <h1 className=\"text-xl font-semibold\">Checkout</h1>\r\n      {loading && <p>Cargando…</p>}\r\n      {!loading && (\r\n        <>\r\n          <div className=\"rounded-xl border bg-white p-4\">\r\n            <h2 className=\"mb-2 font-semibold\">Direcciones</h2>\r\n            {addresses.length === 0 && <p className=\"text-sm text-neutral-600\">No tienes direcciones. Crea una en <b>/addresses</b>.</p>}\r\n            <ul className=\"space-y-2\">\r\n              {addresses.map(a=>(\r\n                <li key={a.id} className=\"flex items-center gap-2\">\r\n                  <input type=\"radio\" name=\"addr\" checked={selected===a.id} onChange={()=>setSelected(a.id)} />\r\n                  <span className=\"text-sm\">{a.fullName} — {a.line1}, {a.city}</span>\r\n                  {a.isDefault && <span className=\"ml-2 rounded bg-neutral-200 px-2 py-0.5 text-xs\">Default</span>}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n\r\n          <div className=\"flex justify-end\">\r\n            <button onClick={pay} className=\"rounded-md bg-black text-white px-4 py-2\">Pagar</button>\r\n          </div>\r\n        </>\r\n      )}\r\n    </section>\r\n  );\r\n}\r\n"
      },
      "dashboard": {
        "new-product": {
          "page.tsx": "\"use client\";\r\n\r\nimport { useEffect, useMemo, useState } from \"react\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport { toast } from \"sonner\";\r\nimport { CatalogService } from \"@/service/catalog/catalog.service\";\r\nimport { ProductContainerService } from \"@/service/product-container/product-container.service\";\r\nimport type { Category, Marca, ProductContainer, Unidad } from \"@/lib/types\";\r\nimport type { CreateProductDto } from \"@/service/products/dto\";\r\nimport { ArrowDown, ArrowUp, ImagePlus, Trash2 } from \"lucide-react\";\r\nimport { ProductsService } from \"@/service/products/product.service\";\r\n\r\ntype ImgItem = { base64: string; alt?: string; position?: number };\r\n\r\nconst money = new Intl.NumberFormat(\"es-CO\", {\r\n  style: \"currency\",\r\n  currency: \"COP\",\r\n});\r\n\r\nasync function fileToBase64(file: File): Promise<string> {\r\n  const buf = await file.arrayBuffer();\r\n  const bytes = new Uint8Array(buf);\r\n  let binary = \"\";\r\n  for (let i = 0; i < bytes.byteLength; i++)\r\n    binary += String.fromCharCode(bytes[i]);\r\n  return `data:${file.type};base64,${btoa(binary)}`;\r\n}\r\n\r\nexport default function NewProductPage() {\r\n  const router = useRouter();\r\n\r\n  // opciones\r\n  const [units, setUnits] = useState<Unidad[]>([]);\r\n  const [brands, setBrands] = useState<Marca[]>([]);\r\n  const [cats, setCats] = useState<Category[]>([]);\r\n  const [containers, setContainers] = useState<ProductContainer[]>([]);\r\n  const [loadingOpt, setLoadingOpt] = useState(true);\r\n\r\n  // form\r\n  const [name, setName] = useState(\"\");\r\n  const [sku, setSku] = useState(\"\");\r\n  const [quantity, setQuantity] = useState<number>(1);\r\n  const [price, setPrice] = useState<number>(0);\r\n  const [unidadId, setUnidadId] = useState<number | null>(null);\r\n  const [marcaId, setMarcaId] = useState<number | null>(null);\r\n  const [containerId, setContainerId] = useState<number | null>(null); // null => auto-crear\r\n  const [categoryIds, setCategoryIds] = useState<number[]>([]);\r\n  const [images, setImages] = useState<ImgItem[]>([]);\r\n  const [minStock, setMinStock] = useState<number>(0);\r\n  const [isActive, setIsActive] = useState<boolean>(true);\r\n\r\n  const [saving, setSaving] = useState(false);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      setLoadingOpt(true);\r\n      try {\r\n        const [u, m, c, pc] = await Promise.all([\r\n          CatalogService.listUnidad(),\r\n          CatalogService.listMarca(),\r\n          CatalogService.listCategories(),\r\n          ProductContainerService.mine(),\r\n        ]);\r\n        setUnits(u ?? []);\r\n        setBrands(m ?? []);\r\n        setCats(c ?? []);\r\n        setContainers(pc ?? []);\r\n      } catch (e: any) {\r\n        toast.error(e.message || \"No se pudieron cargar opciones\");\r\n      } finally {\r\n        setLoadingOpt(false);\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  const topCats = useMemo(() => cats.filter((c) => !c.parentId), [cats]);\r\n\r\n  function toggleCategory(id: number) {\r\n    setCategoryIds((prev) =>\r\n      prev.includes(id) ? prev.filter((x) => x !== id) : [...prev, id]\r\n    );\r\n  }\r\n\r\n  async function onFiles(e: React.ChangeEvent<HTMLInputElement>) {\r\n    const input = e.currentTarget; // guarda la ref sincrónicamente\r\n    const files = Array.from(input.files ?? []);\r\n    if (!files.length) return;\r\n    try {\r\n      const list = await Promise.all(\r\n        files.map(async (f) => ({\r\n          base64: await fileToBase64(f),\r\n          alt: f.name,\r\n        }))\r\n      );\r\n      setImages((prev) => [...prev, ...list]);\r\n    } catch {\r\n      toast.error(\"No se pudieron cargar algunas imágenes\");\r\n    } finally {\r\n      if (input) input.value = \"\";\r\n    }\r\n  }\r\n\r\n  function moveImage(index: number, dir: \"up\" | \"down\") {\r\n    setImages((prev) => {\r\n      const next = [...prev];\r\n      const to = dir === \"up\" ? index - 1 : index + 1;\r\n      if (to < 0 || to >= next.length) return prev;\r\n      [next[index], next[to]] = [next[to], next[index]];\r\n      return next;\r\n    });\r\n  }\r\n\r\n  function removeImage(index: number) {\r\n    setImages((prev) => prev.filter((_, i) => i !== index));\r\n  }\r\n\r\n  async function submit(e: React.FormEvent) {\r\n    e.preventDefault();\r\n    if (!name.trim() || !sku.trim()) {\r\n      toast.error(\"Nombre y SKU son obligatorios\");\r\n      return;\r\n    }\r\n    if (price <= 0) {\r\n      toast.error(\"Precio debe ser mayor a 0\");\r\n      return;\r\n    }\r\n    if (quantity < 0) {\r\n      toast.error(\"Cantidad inválida\");\r\n      return;\r\n    }\r\n\r\n    setSaving(true);\r\n    try {\r\n      const payload: CreateProductDto = {\r\n        name: name.trim(),\r\n        sku: sku.trim(),\r\n        quantity: Number(quantity),\r\n        price: Number(price),\r\n        containerId: containerId || undefined, // si no se envía, el back auto-crea\r\n        unidadId: unidadId || undefined,\r\n        marcaId: marcaId || undefined,\r\n        categoryIds,\r\n        images: images.map((img, i) => ({\r\n          base64: img.base64,\r\n          alt: img.alt,\r\n          position: i,\r\n        })),\r\n        minStock: typeof minStock === \"number\" ? Number(minStock) : undefined,\r\n        isActive,\r\n      };\r\n\r\n      await ProductsService.create(payload);\r\n      toast.success(\"Producto creado\");\r\n\r\n      router.push(\"/dashboard\");\r\n    } catch (err: any) {\r\n      // Tu back lanza NotFoundException para SKU duplicado por contenedor\r\n      const msg = err?.message?.includes(\"SKU\")\r\n        ? \"Ya existe un producto con ese SKU en el contenedor seleccionado.\"\r\n        : err?.message || \"Error al crear el producto\";\r\n      toast.error(msg);\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <section className=\"space-y-6\">\r\n      <div>\r\n        <h1 className=\"text-xl font-semibold\">Nuevo producto</h1>\r\n        <p className=\"text-sm text-neutral-600\">\r\n          Completa la información. Si no seleccionas contenedor, se creará\r\n          automáticamente.\r\n        </p>\r\n      </div>\r\n\r\n      <form onSubmit={submit} className=\"space-y-6\">\r\n        {/* Básicos */}\r\n        <div className=\"grid grid-cols-1 gap-3 rounded-xl border bg-white p-4 sm:grid-cols-2\">\r\n          <div>\r\n            <label className=\"block text-xs text-neutral-500 mb-1\">\r\n              Nombre *\r\n            </label>\r\n            <input\r\n              className=\"w-full rounded-md border px-3 py-2\"\r\n              value={name}\r\n              onChange={(e) => setName(e.target.value)}\r\n              placeholder=\"Nombre del producto\"\r\n              required\r\n            />\r\n          </div>\r\n          <div>\r\n            <label className=\"block text-xs text-neutral-500 mb-1\">SKU *</label>\r\n            <input\r\n              className=\"w-full rounded-md border px-3 py-2\"\r\n              value={sku}\r\n              onChange={(e) => setSku(e.target.value)}\r\n              placeholder=\"SKU\"\r\n              required\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block text-xs text-neutral-500 mb-1\">\r\n              Cantidad *\r\n            </label>\r\n            <input\r\n              type=\"number\"\r\n              min={0}\r\n              className=\"w-full rounded-md border px-3 py-2\"\r\n              value={quantity}\r\n              onChange={(e) => setQuantity(Number(e.target.value || 0))}\r\n              placeholder=\"Cantidad en stock\"\r\n              required\r\n            />\r\n          </div>\r\n          <div>\r\n            <label className=\"block text-xs text-neutral-500 mb-1\">\r\n              Precio *\r\n            </label>\r\n            <input\r\n              type=\"number\"\r\n              min={0}\r\n              step=\"0.01\"\r\n              className=\"w-full rounded-md border px-3 py-2\"\r\n              value={price}\r\n              onChange={(e) => setPrice(Number(e.target.value || 0))}\r\n              placeholder=\"Precio\"\r\n              required\r\n            />\r\n            <div className=\"mt-1 text-xs text-neutral-500\">\r\n              {money.format(price || 0)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Catálogo y contenedor */}\r\n        <div className=\"grid grid-cols-1 gap-3 rounded-xl border bg-white p-4 sm:grid-cols-2\">\r\n          <div>\r\n            <label className=\"block text-xs text-neutral-500 mb-1\">\r\n              Unidad\r\n            </label>\r\n            <select\r\n              className=\"w-full rounded-md border px-3 py-2\"\r\n              value={unidadId ?? \"\"}\r\n              onChange={(e) =>\r\n                setUnidadId(e.target.value ? Number(e.target.value) : null)\r\n              }\r\n              disabled={loadingOpt}\r\n            >\r\n              <option value=\"\">— Selecciona —</option>\r\n              {units.map((u) => (\r\n                <option key={u.id} value={u.id}>\r\n                  {u.nombre}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block text-xs text-neutral-500 mb-1\">Marca</label>\r\n            <select\r\n              className=\"w-full rounded-md border px-3 py-2\"\r\n              value={marcaId ?? \"\"}\r\n              onChange={(e) =>\r\n                setMarcaId(e.target.value ? Number(e.target.value) : null)\r\n              }\r\n              disabled={loadingOpt}\r\n            >\r\n              <option value=\"\">— Selecciona —</option>\r\n              {brands.map((b) => (\r\n                <option key={b.id} value={b.id}>\r\n                  {b.nombre}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n\r\n          <div className=\"sm:col-span-2\">\r\n            <label className=\"block text-xs text-neutral-500 mb-2\">\r\n              Categorías\r\n            </label>\r\n            <div className=\"grid grid-cols-1 gap-2 sm:grid-cols-3\">\r\n              {topCats.map((parent) => {\r\n                const children = cats.filter((c) => c.parentId === parent.id);\r\n                return (\r\n                  <div key={parent.id} className=\"rounded-lg border p-3\">\r\n                    <div className=\"font-medium text-sm\">{parent.name}</div>\r\n                    <div className=\"mt-2 space-y-1\">\r\n                      {children.length === 0 && (\r\n                        <label className=\"inline-flex items-center gap-2 text-sm\">\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            checked={categoryIds.includes(parent.id)}\r\n                            onChange={() => toggleCategory(parent.id)}\r\n                          />\r\n                          {parent.name}\r\n                        </label>\r\n                      )}\r\n                      {children.map((child) => (\r\n                        <label\r\n                          key={child.id}\r\n                          className=\"flex items-center gap-2 text-sm\"\r\n                        >\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            checked={categoryIds.includes(child.id)}\r\n                            onChange={() => toggleCategory(child.id)}\r\n                          />\r\n                          <span>{child.name}</span>\r\n                        </label>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n              {topCats.length === 0 && (\r\n                <div className=\"text-sm text-neutral-500\">\r\n                  No hay categorías.\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block text-xs text-neutral-500 mb-1\">\r\n              Contenedor\r\n            </label>\r\n            <select\r\n              className=\"w-full rounded-md border px-3 py-2\"\r\n              value={containerId ?? \"\"}\r\n              onChange={(e) =>\r\n                setContainerId(e.target.value ? Number(e.target.value) : null)\r\n              }\r\n              disabled={loadingOpt}\r\n            >\r\n              <option value=\"\">Auto (crear para el usuario)</option>\r\n              {containers.map((c) => (\r\n                <option key={c.id} value={c.id}>\r\n                  {c.name ? `${c.name} (#${c.id})` : `Container #${c.id}`}\r\n                </option>\r\n              ))}\r\n            </select>\r\n            <p className=\"mt-1 text-xs text-neutral-500\">\r\n              Si dejas “Auto”, el backend crea uno y lo usa.\r\n            </p>\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block text-xs text-neutral-500 mb-1\">\r\n              Stock mínimo (alerta)\r\n            </label>\r\n            <input\r\n              type=\"number\"\r\n              min={0}\r\n              className=\"w-full rounded-md border px-3 py-2\"\r\n              value={minStock}\r\n              onChange={(e) => setMinStock(Number(e.target.value || 0))}\r\n              placeholder=\"0\"\r\n            />\r\n          </div>\r\n\r\n          <label className=\"inline-flex items-center gap-2 text-sm sm:col-span-2\">\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={isActive}\r\n              onChange={(e) => setIsActive(e.target.checked)}\r\n            />\r\n            Producto activo (visible en el catálogo)\r\n          </label>\r\n        </div>\r\n\r\n        {/* Imágenes */}\r\n        <div className=\"rounded-xl border bg-white p-4\">\r\n          <div className=\"mb-2 text-sm font-medium\">Imágenes</div>\r\n          <div className=\"flex items-center gap-3\">\r\n            <label className=\"inline-flex cursor-pointer items-center gap-2 rounded-md border bg-white px-3 py-2 text-sm hover:bg-neutral-100\">\r\n              <ImagePlus className=\"h-4 w-4\" />\r\n              <span>Agregar imágenes</span>\r\n              <input\r\n                type=\"file\"\r\n                accept=\"image/*\"\r\n                multiple\r\n                onChange={onFiles}\r\n                className=\"hidden\"\r\n              />\r\n            </label>\r\n            <span className=\"text-xs text-neutral-500\">\r\n              Se envían como base64; podrás reordenarlas.\r\n            </span>\r\n          </div>\r\n\r\n          {images.length > 0 && (\r\n            <ul className=\"mt-4 grid grid-cols-2 gap-3 sm:grid-cols-4\">\r\n              {images.map((img, i) => (\r\n                <li key={i} className=\"rounded-lg border p-2\">\r\n                  <div className=\"aspect-square w-full overflow-hidden rounded\">\r\n                    <img\r\n                      src={img.base64}\r\n                      alt={img.alt || `img-${i}`}\r\n                      className=\"h-full w-full object-cover\"\r\n                    />\r\n                  </div>\r\n                  <input\r\n                    className=\"mt-2 w-full rounded-md border px-2 py-1 text-xs\"\r\n                    placeholder=\"Alt/Descripción\"\r\n                    value={img.alt ?? \"\"}\r\n                    onChange={(e) =>\r\n                      setImages((prev) => {\r\n                        const next = [...prev];\r\n                        next[i] = { ...next[i], alt: e.target.value };\r\n                        return next;\r\n                      })\r\n                    }\r\n                  />\r\n                  <div className=\"mt-2 flex items-center justify-between\">\r\n                    <div className=\"inline-flex gap-1\">\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={() => moveImage(i, \"up\")}\r\n                        className=\"rounded-md border px-2 py-1 text-xs hover:bg-neutral-100 disabled:opacity-50\"\r\n                        disabled={i === 0}\r\n                        title=\"Subir\"\r\n                      >\r\n                        <ArrowUp className=\"h-3.5 w-3.5\" />\r\n                      </button>\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={() => moveImage(i, \"down\")}\r\n                        className=\"rounded-md border px-2 py-1 text-xs hover:bg-neutral-100 disabled:opacity-50\"\r\n                        disabled={i === images.length - 1}\r\n                        title=\"Bajar\"\r\n                      >\r\n                        <ArrowDown className=\"h-3.5 w-3.5\" />\r\n                      </button>\r\n                    </div>\r\n                    <button\r\n                      type=\"button\"\r\n                      onClick={() => removeImage(i)}\r\n                      className=\"rounded-md border px-2 py-1 text-xs hover:bg-red-50\"\r\n                      title=\"Eliminar\"\r\n                    >\r\n                      <Trash2 className=\"h-3.5 w-3.5\" />\r\n                    </button>\r\n                  </div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          )}\r\n          {images.length === 0 && (\r\n            <div className=\"mt-3 rounded-lg border border-dashed p-6 text-center text-sm text-neutral-500\">\r\n              Aún no has agregado imágenes.\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"flex justify-end\">\r\n          <button\r\n            disabled={saving}\r\n            className=\"rounded-md bg-black px-4 py-2 text-white\"\r\n          >\r\n            {saving ? \"Guardando…\" : \"Guardar producto\"}\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </section>\r\n  );\r\n}\r\n"
        },
        "page.tsx": "\"use client\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport type { Product } from \"@/lib/types\";\r\nimport Link from \"next/link\";\r\nimport { ProductsService } from \"@/service/products/product.service\";\r\n\r\nexport default function DashboardPage() {\r\n  const [items,setItems]=useState<Product[]>([]);\r\n  const [loading,setLoading]=useState(true);\r\n\r\n  useEffect(()=>{\r\n    (async()=>{\r\n      try{\r\n        const res = await ProductsService.listMine({ limit: 50, offset: 0 });\r\n        setItems(res.products ?? []);\r\n      } finally { setLoading(false); }\r\n    })();\r\n  },[]);\r\n\r\n  return (\r\n    <section className=\"space-y-4\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <h1 className=\"text-xl font-semibold\">Mis productos</h1>\r\n        <Link className=\"rounded-md bg-black text-white px-3 py-2 text-sm\" href=\"/dashboard/new-product\">Nuevo</Link>\r\n      </div>\r\n\r\n      {loading && <p>Cargando…</p>}\r\n\r\n      {!loading && items.length === 0 && (\r\n        <div className=\"rounded-xl border bg-white p-6 text-neutral-600\">\r\n          Aún no tienes productos.\r\n        </div>\r\n      )}\r\n\r\n      {!loading && items.length > 0 && (\r\n        <table className=\"w-full text-sm border bg-white\">\r\n          <thead className=\"bg-neutral-100\">\r\n            <tr>\r\n              <th className=\"p-2 border\">ID</th>\r\n              <th className=\"p-2 border text-left\">Nombre</th>\r\n              <th className=\"p-2 border\">SKU</th>\r\n              <th className=\"p-2 border\">Stock</th>\r\n              <th className=\"p-2 border\">Precio</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {items.map(p=>(\r\n              <tr key={p.id}>\r\n                <td className=\"p-2 border text-center\">{p.id}</td>\r\n                <td className=\"p-2 border\">{p.name}</td>\r\n                <td className=\"p-2 border text-center\">{p.sku}</td>\r\n                <td className=\"p-2 border text-center\">{p.quantity}</td>\r\n                <td className=\"p-2 border text-right\">${Number(p.price).toLocaleString()}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n    </section>\r\n  );\r\n}\r\n"
      },
      "favicon.ico": "(binary)",
      "globals.css": "@import \"tailwindcss\";\n\n:root {\n  --background: #ffffff;\n  --foreground: #171717;\n}\n\n@theme inline {\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --font-sans: var(--font-geist-sans);\n  --font-mono: var(--font-geist-mono);\n}\n\n@media (prefers-color-scheme: dark) {\n  :root {\n    --background: #0a0a0a;\n    --foreground: #ededed;\n  }\n}\n\nbody {\n  background: var(--background);\n  color: var(--foreground);\n  font-family: Arial, Helvetica, sans-serif;\n}\n",
      "layout.tsx": "import type { Metadata } from \"next\";\nimport { Geist, Geist_Mono } from \"next/font/google\";\nimport \"./globals.css\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Toaster } from \"sonner\";\n\nconst geistSans = Geist({\n  variable: \"--font-geist-sans\",\n  subsets: [\"latin\"],\n});\n\nconst geistMono = Geist_Mono({\n  variable: \"--font-geist-mono\",\n  subsets: [\"latin\"],\n});\n\nexport const metadata: Metadata = {\n  title: \"Ecommerce - UDLA\",\n  description: \"E-commerce demo con Next.js + Nest + Prisma\",\n};\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"es\">\n      <body className=\"min-h-dvh flex flex-col bg-neutral-50 text-neutral-900\">\n        <Header />\n        <main className=\"flex-1 mx-auto w-full max-w-6xl px-4 py-8\">\n          {children}\n        </main>\n        <Footer />\n        <Toaster richColors />\n      </body>\n    </html>\n  );\n}\n",
      "login": {
        "page.tsx": "\"use client\";\r\n\r\nimport { useState } from \"react\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport { AuthService } from \"@/service/auth/auth.service\";\r\nimport { toast } from \"sonner\";\r\nimport Link from \"next/link\";\r\n\r\nexport default function LoginPage() {\r\n  const router = useRouter();\r\n  const [email,setEmail]=useState(\"\"); \r\n  const [password,setPassword]=useState(\"\");\r\n  const [loading,setLoading]=useState(false);\r\n\r\n  async function onSubmit(e: React.FormEvent) {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    try{\r\n      await AuthService.login({ email, password });\r\n      toast.success(\"Sesión iniciada\");\r\n      router.push(\"/dashboard\");\r\n    }catch(e:any){\r\n      toast.error(e.message || \"Error al iniciar sesión\");\r\n    }finally{ setLoading(false); }\r\n  }\r\n\r\n  return (\r\n    <section className=\"mx-auto max-w-sm\">\r\n      <h1 className=\"mb-4 text-xl font-semibold\">Login</h1>\r\n      <form onSubmit={onSubmit} className=\"space-y-3\">\r\n        <input className=\"w-full border rounded-md px-3 py-2\" placeholder=\"Email\" value={email} onChange={e=>setEmail(e.target.value)} />\r\n        <input className=\"w-full border rounded-md px-3 py-2\" placeholder=\"Contraseña\" type=\"password\" value={password} onChange={e=>setPassword(e.target.value)} />\r\n        <button disabled={loading} className=\"w-full rounded-md bg-black text-white py-2\">{loading? \"Entrando...\" : \"Entrar\"}</button>\r\n      </form>\r\n      <p className=\"mt-3 text-sm text-neutral-600\">¿No tienes cuenta? <Link className=\"underline\" href=\"/register\">Registrarse</Link></p>\r\n    </section>\r\n  );\r\n}\r\n"
      },
      "page.tsx": "\"use client\";\nimport { useEffect, useMemo, useState } from \"react\";\n\nimport type { Product } from \"@/lib/types\";\nimport { ProductsService } from \"@/service/products/product.service\";\nimport SearchBar from \"@/components/common/searchBar\";\nimport LoadingGrid from \"@/components/common/loadingGrid\";\nimport EmptyState from \"@/components/common/emptyState\";\nimport ProductGrid from \"@/components/product/productGrid\";\nimport Pagination from \"@/components/common/pagination\";\n\nconst PAGE_SIZE = 12;\n\nexport default function HomePage() {\n  const [loading, setLoading] = useState(true);\n  const [items, setItems] = useState<Product[]>([]);\n  const [totalPages, setTotalPages] = useState(1);\n  const [error, setError] = useState<string | null>(null);\n\n  // estado UI\n  const [page, setPage] = useState(1);          // 1-based\n  const [query, setQuery] = useState(\"\");       // búsqueda por nombre\n\n  const showPagination = useMemo(() => query.length === 0, [query]);\n\n  async function loadList(p = 1) {\n    setLoading(true);\n    setError(null);\n    try {\n      const res = await ProductsService.list({\n        limit: PAGE_SIZE,\n        offset: (p - 1) * PAGE_SIZE,\n      });\n      setItems(res.products ?? []);\n      setTotalPages(res.totalPages ?? 1);\n    } catch (e: any) {\n      setError(e.message || \"Error cargando productos\");\n      setItems([]);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function loadSearch(q: string) {\n    setLoading(true);\n    setError(null);\n    try {\n      const res = await ProductsService.search(q);\n      setItems(res.products ?? []);\n      setTotalPages(1); // sin paginación en match\n    } catch (e: any) {\n      setError(e.message || \"Error buscando productos\");\n      setItems([]);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  // carga inicial\n  useEffect(() => { loadList(1); }, []);\n\n  // evento de búsqueda\n  function onSearch(q: string) {\n    setQuery(q);\n    setPage(1);\n    if (q) loadSearch(q);\n    else loadList(1);\n  }\n\n  // cambio de página\n  function onPage(p: number) {\n    setPage(p);\n    loadList(p);\n    window.scrollTo({ top: 0, behavior: \"smooth\" });\n  }\n\n  return (\n    <section className=\"space-y-6\">\n      <header className=\"flex items-center justify-between gap-4\">\n        <div>\n          <h1 className=\"text-xl font-semibold\">Productos</h1>\n          <p className=\"text-sm text-neutral-500\">Explora el catálogo disponible</p>\n        </div>\n        <div className=\"w-full max-w-md\">\n          <SearchBar onSearch={onSearch} />\n        </div>\n      </header>\n\n      {loading && <LoadingGrid count={PAGE_SIZE} />}\n\n      {!loading && error && (\n        <div className=\"rounded-xl border bg-white p-4 text-red-600\">{error}</div>\n      )}\n\n      {!loading && !error && items.length === 0 && <EmptyState />}\n\n      {!loading && !error && items.length > 0 && <ProductGrid items={items} />}\n\n      {!loading && !error && showPagination && (\n        <Pagination page={page} totalPages={totalPages} onPage={onPage} />\n      )}\n    </section>\n  );\n}\n",
      "register": {
        "page.tsx": "\"use client\";\r\n\r\nimport { useState } from \"react\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport { AuthService } from \"@/service/auth/auth.service\";\r\nimport { toast } from \"sonner\";\r\nimport Link from \"next/link\";\r\n\r\nexport default function RegisterPage() {\r\n  const router = useRouter();\r\n  const [username,setUsername]=useState(\"\"); \r\n  const [email,setEmail]=useState(\"\"); \r\n  const [password,setPassword]=useState(\"\");\r\n  const [loading,setLoading]=useState(false);\r\n\r\n  async function onSubmit(e: React.FormEvent) {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    try{\r\n      await AuthService.register({ username, email, password });\r\n      toast.success(\"Cuenta creada\");\r\n      router.push(\"/dashboard\");\r\n    }catch(e:any){\r\n      toast.error(e.message || \"Error al registrar\");\r\n    }finally{ setLoading(false); }\r\n  }\r\n\r\n  return (\r\n    <section className=\"mx-auto max-w-sm\">\r\n      <h1 className=\"mb-4 text-xl font-semibold\">Registro</h1>\r\n      <form onSubmit={onSubmit} className=\"space-y-3\">\r\n        <input className=\"w-full border rounded-md px-3 py-2\" placeholder=\"Usuario\" value={username} onChange={e=>setUsername(e.target.value)} />\r\n        <input className=\"w-full border rounded-md px-3 py-2\" placeholder=\"Email\" value={email} onChange={e=>setEmail(e.target.value)} />\r\n        <input className=\"w-full border rounded-md px-3 py-2\" placeholder=\"Contraseña\" type=\"password\" value={password} onChange={e=>setPassword(e.target.value)} />\r\n        <button disabled={loading} className=\"w-full rounded-md bg-black text-white py-2\">{loading? \"Creando...\" : \"Crear cuenta\"}</button>\r\n      </form>\r\n      <p className=\"mt-3 text-sm text-neutral-600\">¿Ya tienes cuenta? <Link className=\"underline\" href=\"/login\">Entrar</Link></p>\r\n    </section>\r\n  );\r\n}\r\n"
      }
    },
    "components": {
      "admin": {
        "adminSidebar.tsx": "\"use client\";\r\n\r\nimport Link from \"next/link\";\r\nimport { usePathname } from \"next/navigation\";\r\nimport { Users, Layers, Box, Tag, PackageSearch, ChevronLeft, ChevronRight } from \"lucide-react\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function AdminSidebar() {\r\n  const pathname = usePathname();\r\n  const [open, setOpen] = useState(true);\r\n\r\n  const links = [\r\n    { href: \"/admin/products\",   label: \"Products\",   icon: <PackageSearch size={18} /> },\r\n    { href: \"/admin/users\",      label: \"Usuarios\",   icon: <Users size={18} /> },\r\n    { href: \"/admin/categories\", label: \"Categorías\", icon: <Layers size={18} /> },\r\n    { href: \"/admin/units\",      label: \"Unidades\",   icon: <Box size={18} /> },\r\n    { href: \"/admin/brands\",     label: \"Marcas\",     icon: <Tag size={18} /> },\r\n  ];\r\n\r\n  return (\r\n    <aside className={`sticky top-[72px] self-start rounded-xl border bg-white p-3 shadow-sm ${open ? \"w-60\" : \"w-14\"} transition-all`}>\r\n      <button\r\n        onClick={() => setOpen(v => !v)}\r\n        className=\"mb-2 w-full rounded-md border px-2 py-1 text-xs hover:bg-neutral-50\"\r\n        title={open ? \"Colapsar\" : \"Expandir\"}\r\n      >\r\n        {open ? <ChevronLeft size={16} /> : <ChevronRight size={16} />}\r\n      </button>\r\n      <nav className=\"flex flex-col gap-1\">\r\n        {links.map(l => {\r\n          const active = pathname === l.href || pathname.startsWith(l.href + \"/\");\r\n          return (\r\n            <Link\r\n              key={l.href}\r\n              href={l.href}\r\n              className={`inline-flex items-center gap-2 rounded-md px-3 py-2 text-sm transition\r\n                ${active ? \"bg-black text-white\" : \"hover:bg-neutral-100\"}`}\r\n            >\r\n              {l.icon}\r\n              {open && <span>{l.label}</span>}\r\n            </Link>\r\n          );\r\n        })}\r\n      </nav>\r\n    </aside>\r\n  );\r\n}\r\n",
        "chartCard.tsx": "\"use client\";\r\n\r\nexport default function ChartCard({\r\n  title,\r\n  children,\r\n}: {\r\n  title: string;\r\n  children: React.ReactNode;\r\n}) {\r\n  return (\r\n    <div className=\"rounded-xl border bg-white p-4 shadow-sm\">\r\n      <div className=\"mb-3 text-sm font-medium text-neutral-700\">{title}</div>\r\n      <div className=\"h-64 w-full\">{children}</div>\r\n    </div>\r\n  );\r\n}\r\n",
        "kpiCard.tsx": "\"use client\";\r\n\r\nexport default function KpiCard({\r\n  label,\r\n  value,\r\n  hint,\r\n}: {\r\n  label: string;\r\n  value: string | number;\r\n  hint?: string;\r\n}) {\r\n  return (\r\n    <div className=\"rounded-xl border bg-white p-4 shadow-sm\">\r\n      <div className=\"text-xs uppercase tracking-wide text-neutral-500\">{label}</div>\r\n      <div className=\"mt-2 text-2xl font-semibold\">{value}</div>\r\n      {hint && <div className=\"mt-1 text-xs text-neutral-500\">{hint}</div>}\r\n    </div>\r\n  );\r\n}\r\n",
        "sectionHeader.tsx": "\"use client\";\r\n\r\nexport default function SectionHeader({\r\n  title,\r\n  subtitle,\r\n  right,\r\n}: {\r\n  title: string;\r\n  subtitle?: string;\r\n  right?: React.ReactNode;\r\n}) {\r\n  return (\r\n    <div className=\"flex flex-col gap-3 sm:flex-row sm:items-end sm:justify-between\">\r\n      <div>\r\n        <h1 className=\"text-xl font-semibold\">{title}</h1>\r\n        {subtitle && <p className=\"text-sm text-neutral-600\">{subtitle}</p>}\r\n      </div>\r\n      {right}\r\n    </div>\r\n  );\r\n}\r\n"
      },
      "common": {
        "emptyState.tsx": "export default function EmptyState({ text = \"No hay productos para mostrar.\" }) {\r\n  return (\r\n    <div className=\"rounded-xl border bg-white p-8 text-center text-neutral-500\">\r\n      {text}\r\n    </div>\r\n  );\r\n}\r\n",
        "loadingGrid.tsx": "export default function LoadingGrid({ count = 6 }: { count?: number }) {\r\n  return (\r\n    <ul className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n      {Array.from({ length: count }).map((_, i) => (\r\n        <li key={i} className=\"rounded-xl border bg-white p-4 animate-pulse\">\r\n          <div className=\"aspect-[4/3] w-full rounded-lg bg-neutral-200\" />\r\n          <div className=\"mt-3 h-4 w-3/4 rounded bg-neutral-200\" />\r\n          <div className=\"mt-2 h-3 w-1/2 rounded bg-neutral-100\" />\r\n          <div className=\"mt-2 h-4 w-1/3 rounded bg-neutral-200\" />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n",
        "pagination.tsx": "\"use client\";\r\n\r\nexport default function Pagination({\r\n  page,\r\n  totalPages,\r\n  onPage,\r\n}: {\r\n  page: number;         // 1-based\r\n  totalPages: number;   // >= 1\r\n  onPage: (p: number) => void;\r\n}) {\r\n  if (totalPages <= 1) return null;\r\n\r\n  const prev = () => onPage(Math.max(1, page - 1));\r\n  const next = () => onPage(Math.min(totalPages, page + 1));\r\n\r\n  // Rango compacto\r\n  const pages = Array.from({ length: totalPages }, (_, i) => i + 1).slice(0, 8); // limita a 8 para UI simple\r\n\r\n  return (\r\n    <nav className=\"mt-6 flex items-center justify-center gap-1 text-sm\">\r\n      <button className=\"px-3 py-1 border rounded-md bg-white disabled:opacity-50\" onClick={prev} disabled={page === 1}>\r\n        ◀\r\n      </button>\r\n      {pages.map((p) => (\r\n        <button\r\n          key={p}\r\n          onClick={() => onPage(p)}\r\n          className={`px-3 py-1 border rounded-md ${p === page ? \"bg-black text-white\" : \"bg-white\"}`}\r\n        >\r\n          {p}\r\n        </button>\r\n      ))}\r\n      <button\r\n        className=\"px-3 py-1 border rounded-md bg-white disabled:opacity-50\"\r\n        onClick={next}\r\n        disabled={page === totalPages}\r\n      >\r\n        ▶\r\n      </button>\r\n    </nav>\r\n  );\r\n}\r\n",
        "searchBar.tsx": "\"use client\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function SearchBar({\r\n  onSearch,\r\n  initial = \"\",\r\n  placeholder = \"Buscar por nombre o SKU…\",\r\n}: {\r\n  onSearch: (q: string) => void;\r\n  initial?: string;\r\n  placeholder?: string;\r\n}) {\r\n  const [q, setQ] = useState(initial);\r\n\r\n  function submit(e: React.FormEvent) {\r\n    e.preventDefault();\r\n    onSearch(q.trim());\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={submit} className=\"flex gap-2\">\r\n      <input\r\n        value={q}\r\n        onChange={(e) => setQ(e.target.value)}\r\n        placeholder={placeholder}\r\n        className=\"border rounded-md px-3 py-2 w-full\"\r\n      />\r\n      <button type=\"submit\" className=\"px-3 py-2 rounded-md border bg-white\">\r\n        Buscar\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n"
      },
      "layout": {
        "footer.tsx": "export default function Footer() {\r\n  const year = new Date().getFullYear();\r\n  return (\r\n    <footer className=\"mt-10 border-t bg-white\">\r\n      <div className=\"mx-auto max-w-6xl px-4 py-6 text-sm text-neutral-500\">\r\n        <div className=\"flex flex-col items-center justify-between gap-3 sm:flex-row\">\r\n          <p>© {year} XD Marketplace. Todos los derechos reservados.</p>\r\n          <div className=\"flex gap-4\">\r\n            <a className=\"hover:text-neutral-700\" href=\"#\">Términos</a>\r\n            <a className=\"hover:text-neutral-700\" href=\"#\">Privacidad</a>\r\n            <a className=\"hover:text-neutral-700\" href=\"#\">Contacto</a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n",
        "header.tsx": "\"use client\";\r\n\r\nimport Link from \"next/link\";\r\nimport { usePathname, useRouter } from \"next/navigation\";\r\nimport { useEffect, useMemo, useState } from \"react\";\r\nimport type { User } from \"@/lib/types\";\r\nimport { AuthService } from \"@/service/auth/auth.service\";\r\nimport { onAuthChange } from \"@/lib/auth-bus\";\r\nimport {\r\n  LogIn, LogOut, User2, Home, ShoppingCart, LayoutDashboard, Shield, Menu, X\r\n} from \"lucide-react\";\r\n\r\ntype MidLink = {\r\n  href: string;\r\n  label: string;\r\n  icon: React.ReactNode;\r\n  show: boolean;\r\n  match?: \"exact\" | \"startsWith\";\r\n};\r\n\r\nexport default function Header() {\r\n  const router = useRouter();\r\n  const pathname = usePathname();\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [open, setOpen] = useState(false); // menú móvil\r\n\r\n  // Carga inicial si hay token\r\n  useEffect(() => {\r\n    const token = typeof window !== \"undefined\" ? localStorage.getItem(\"jwt_token\") : null;\r\n    if (!token) return;\r\n    AuthService.validate().then(setUser).catch(() => setUser(null));\r\n  }, []);\r\n\r\n  // Suscripción a cambios de auth (login/logout)\r\n  useEffect(() => {\r\n    const off = onAuthChange(async (e) => {\r\n      if (e.detail.type === \"login\") {\r\n        try { setUser(await AuthService.validate()); } catch { setUser(null); }\r\n      } else {\r\n        setUser(null);\r\n      }\r\n    });\r\n    return off;\r\n  }, []);\r\n\r\n  const isAdmin = user?.role === \"ADMIN\";\r\n  const isSeller = user?.role === \"SELLER\";\r\n  const isBuyer  = user?.role === \"BUYER\";\r\n\r\n  const midLinks = useMemo<MidLink[]>(\r\n    () => [\r\n      { href: \"/\",               label: \"Inicio\",    icon: <Home size={18} />,            show: true,                        match: \"exact\" },\r\n      { href: \"/cart\",           label: \"Carrito\",   icon: <ShoppingCart size={18} />,    show: true,                        match: \"startsWith\" },\r\n      { href: \"/dashboard\",      label: \"Dashboard\", icon: <LayoutDashboard size={18} />, show: Boolean(user && (isSeller || isBuyer)), match: \"startsWith\" },\r\n      { href: \"/admin/products\", label: \"Admin\",     icon: <Shield size={18} />,          show: Boolean(user && isAdmin),    match: \"startsWith\" },\r\n    ],\r\n    [user, isAdmin, isSeller, isBuyer]\r\n  );\r\n\r\n  function isActive(href: string, mode: MidLink[\"match\"] = \"startsWith\") {\r\n    if (mode === \"exact\") return pathname === href;\r\n    return pathname === href || pathname.startsWith(href + \"/\");\r\n  }\r\n\r\n  function logout() {\r\n    AuthService.logout();\r\n    setOpen(false);\r\n    router.push(\"/\");\r\n  }\r\n\r\n  function closeAnd(to?: string) {\r\n    return () => {\r\n      setOpen(false);\r\n      if (to) router.push(to);\r\n    };\r\n  }\r\n\r\n  return (\r\n    <header className=\"border-b bg-white\">\r\n      <div className=\"mx-auto max-w-6xl px-4\">\r\n        {/* Top bar */}\r\n        <div className=\"flex h-14 items-center justify-between\">\r\n          {/* Marca */}\r\n          <Link href=\"/\" className=\"flex items-center gap-2 font-semibold\">\r\n            <span>Marketplace</span>\r\n          </Link>\r\n\r\n          {/* Nav centro (solo desktop) */}\r\n          <nav className=\"hidden items-center gap-1 md:flex\">\r\n            {midLinks.filter(l => l.show).map((l) => {\r\n              const active = isActive(l.href, l.match);\r\n              return (\r\n                <Link\r\n                  key={l.href}\r\n                  href={l.href}\r\n                  aria-current={active ? \"page\" : undefined}\r\n                  className={`inline-flex items-center gap-2 rounded-md px-3 py-2 text-sm transition\r\n                    ${active ? \"bg-black text-white\" : \"hover:bg-neutral-100\"}`}\r\n                >\r\n                  {l.icon}\r\n                  <span>{l.label}</span>\r\n                </Link>\r\n              );\r\n            })}\r\n          </nav>\r\n\r\n          <div className=\"flex items-center gap-2\">\r\n            <button\r\n              onClick={() => setOpen(v => !v)}\r\n              className=\"inline-flex h-10 w-10 items-center justify-center rounded-md hover:bg-neutral-100 md:hidden\"\r\n              aria-label={open ? \"Cerrar menú\" : \"Abrir menú\"}\r\n              aria-expanded={open}\r\n              aria-controls=\"mobile-menu\"\r\n            >\r\n              {open ? <X size={20} /> : <Menu size={20} />}\r\n            </button>\r\n\r\n            {/* Login/Logout (siempre visible) */}\r\n            {!user ? (\r\n              <Link\r\n                href=\"/login\"\r\n                title=\"Iniciar sesión\"\r\n                aria-label=\"Iniciar sesión\"\r\n                className=\"hidden md:inline-flex items-center gap-2 rounded-md border px-3 py-2 text-sm hover:bg-neutral-100\"\r\n              >\r\n                <LogIn size={18} />\r\n                <span>Login</span>\r\n              </Link>\r\n            ) : (\r\n              <div className=\"hidden md:inline-flex items-center gap-2\">\r\n                <div\r\n                  title={`${user.username} · ${user.role}`}\r\n                  className=\"inline-flex items-center gap-2 rounded-full bg-neutral-200 px-3 py-1 text-xs text-neutral-900\"\r\n                >\r\n                  <User2 size={16} />\r\n                  <span className=\"truncate max-w-[12rem]\">{user.username}</span>\r\n                  <span className=\"opacity-70\">· {user.role}</span>\r\n                </div>\r\n                <button\r\n                  onClick={logout}\r\n                  title=\"Cerrar sesión\"\r\n                  aria-label=\"Cerrar sesión\"\r\n                  className=\"inline-flex items-center gap-2 rounded-md border px-3 py-2 text-sm hover:bg-neutral-100\"\r\n                >\r\n                  <LogOut size={18} />\r\n                  <span>Salir</span>\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Menú móvil desplegable */}\r\n        {open && (\r\n          <div id=\"mobile-menu\" className=\"md:hidden border-t pb-3\">\r\n            <nav className=\"flex flex-col px-1 pt-2\">\r\n              {midLinks.filter(l => l.show).map((l) => {\r\n                const active = isActive(l.href, l.match);\r\n                return (\r\n                  <Link\r\n                    key={l.href}\r\n                    href={l.href}\r\n                    onClick={closeAnd()}\r\n                    className={`inline-flex items-center gap-3 rounded-lg px-4 py-3 text-[15px] transition\r\n                      ${active ? \"bg-black text-white\" : \"hover:bg-neutral-100\"}`}\r\n                  >\r\n                    {l.icon}\r\n                    <span>{l.label}</span>\r\n                  </Link>\r\n                );\r\n              })}\r\n            </nav>\r\n\r\n            <div className=\"mt-2 px-1\">\r\n              {!user ? (\r\n                <Link\r\n                  href=\"/login\"\r\n                  onClick={closeAnd()}\r\n                  className=\"inline-flex w-full items-center justify-center gap-2 rounded-md border px-4 py-3 text-sm hover:bg-neutral-100\"\r\n                >\r\n                  <LogIn size={18} />\r\n                  <span>Login</span>\r\n                </Link>\r\n              ) : (\r\n                <>\r\n                  <div className=\"mx-1 mb-2 inline-flex items-center gap-2 rounded-full bg-neutral-200 px-3 py-1 text-xs text-neutral-900\">\r\n                    <User2 size={16} />\r\n                    <span className=\"truncate\">{user.username}</span>\r\n                    <span className=\"opacity-70\">· {user.role}</span>\r\n                  </div>\r\n                  <button\r\n                    onClick={logout}\r\n                    className=\"inline-flex w-full items-center justify-center gap-2 rounded-md border px-4 py-3 text-sm hover:bg-neutral-100\"\r\n                  >\r\n                    <LogOut size={18} />\r\n                    <span>Salir</span>\r\n                  </button>\r\n                </>\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n"
      },
      "product": {
        "productCart.tsx": "\"use client\";\r\nimport type { Product } from \"@/lib/types\";\r\n\r\nconst money = new Intl.NumberFormat(\"es-CO\", { style: \"currency\", currency: \"COP\" });\r\n\r\nexport default function ProductCard({ product }: { product: Product }) {\r\n  const img = \"/placeholder.svg\"; \r\n  const price = typeof product.price === \"string\" ? parseFloat(product.price) : product.price;\r\n\r\n  return (\r\n    <article className=\"group rounded-xl border bg-white p-4 shadow-sm hover:shadow-md transition\">\r\n      <div className=\"aspect-[4/3] w-full overflow-hidden rounded-lg bg-neutral-100\">\r\n        <img src={img} alt={product.name} className=\"h-full w-full object-cover\" />\r\n      </div>\r\n\r\n      <header className=\"mt-3\">\r\n        <h3 className=\"line-clamp-1 text-sm font-semibold\">{product.name}</h3>\r\n        <p className=\"mt-1 text-xs text-neutral-500\">SKU: {product.sku}</p>\r\n      </header>\r\n\r\n      <footer className=\"mt-2 flex items-center justify-between\">\r\n        <span className=\"text-base font-semibold\">{money.format(price ?? 0)}</span>\r\n        <span className=\"text-xs text-neutral-500\">Stock: {product.quantity}</span>\r\n      </footer>\r\n    </article>\r\n  );\r\n}\r\n",
        "productGrid.tsx": "\"use client\";\r\nimport type { Product } from \"@/lib/types\";\r\nimport ProductCard from \"./productCart\";\r\n\r\nexport default function ProductGrid({ items }: { items: Product[] }) {\r\n  return (\r\n    <ul className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n      {items.map((p) => (\r\n        <li key={p.id}>\r\n          <ProductCard product={p} />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n"
      }
    },
    "lib": {
      "auth-bus.ts": "export const AUTH_EVENT = \"auth:changed\";\r\n\r\nexport type AuthChange =\r\n  | { type: \"login\"; token: string }\r\n  | { type: \"logout\" };\r\n\r\nexport function notifyAuthChange(detail: AuthChange) {\r\n  if (typeof window === \"undefined\") return;\r\n  window.dispatchEvent(new CustomEvent(AUTH_EVENT, { detail }));\r\n}\r\n\r\nexport function onAuthChange(\r\n  handler: (e: CustomEvent<AuthChange>) => void\r\n) {\r\n  const wrapped = (ev: Event) => handler(ev as CustomEvent<AuthChange>);\r\n  window.addEventListener(AUTH_EVENT, wrapped as EventListener);\r\n  return () => window.removeEventListener(AUTH_EVENT, wrapped as EventListener);\r\n}\r\n",
      "format.ts": "import { ProductImage } from \"./types\";\r\n\r\nexport const currency = (value: number, locale = \"es-CO\", currency = \"COP\") =>\r\n  new Intl.NumberFormat(locale, {\r\n    style: \"currency\",\r\n    currency,\r\n    maximumFractionDigits: 0,\r\n  }).format(value);\r\n\r\nexport const cls = (...xs: (string | false | undefined | null)[]) =>\r\n  xs.filter(Boolean).join(\" \");\r\n\r\nexport function base64ToDataUrl(img?: ProductImage) {\r\n  if (!img) return \"\";\r\n  const mime = img.alt ?? \"image/jpeg\";\r\n  const raw = img.base64?.startsWith(\"data:\")\r\n    ? img.base64.split(\",\")[1]\r\n    : img.base64;\r\n  return `data:${mime};base64,${raw}`;\r\n}\r\n",
      "http.ts": "import axios from \"axios\";\r\n\r\nexport const http = axios.create({\r\n  baseURL: process.env.NEXT_PUBLIC_API_URL,\r\n  headers: { \"Content-Type\": \"application/json\" },\r\n  withCredentials: false,\r\n});\r\n\r\nhttp.interceptors.request.use((config) => {\r\n  if (typeof window !== \"undefined\") {\r\n    const token = localStorage.getItem(\"jwt_token\");\r\n    if (token) config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\nhttp.interceptors.response.use(\r\n  (r) => r,\r\n  (err) => {\r\n    const msg =\r\n      err?.response?.data?.message ||\r\n      err?.message ||\r\n      \"Error de red o del servidor\";\r\n    return Promise.reject(new Error(msg));\r\n  }\r\n);\r\n",
      "types.ts": "export type Role = \"ADMIN\" | \"SELLER\" | \"BUYER\";\r\n\r\nexport type User = {\r\n  id: number;\r\n  email: string;\r\n  username: string;\r\n  role: Role;\r\n  createdAt?: string;\r\n};\r\n\r\nexport type Product = {\r\n  id: number;\r\n  name: string;\r\n  sku: string;\r\n  quantity: number;\r\n  price: number | string;   // Prisma Decimal llega como string\r\n  isActive?: boolean;\r\n  containerId?: number;\r\n  container?: { id: number; user?: Pick<User, \"id\" | \"email\" | \"username\" | \"role\"> };\r\n  unidadId?: number;\r\n  marcaId?: number;\r\n  categoryIds?: number[];\r\n  images?: { base64: string; alt?: string; position?: number }[];\r\n  minStock?: number;\r\n};\r\n\r\nexport type ProductContainer = {\r\n  id: number;\r\n  name?: string | null;\r\n  userId: number;\r\n};\r\n\r\nexport type Address = {\r\n  id: number;\r\n  fullName: string;\r\n  phone: string;\r\n  line1: string;\r\n  line2?: string | null;\r\n  city: string;\r\n  state?: string | null;\r\n  country: string;\r\n  zip?: string | null;\r\n  isDefault: boolean;\r\n};\r\n\r\nexport type CartItem = {\r\n  id: number;\r\n  cartId: number;\r\n  productId: number;\r\n  qty: number;\r\n  priceAtAdd: number | string;\r\n  product?: Product;\r\n};\r\n\r\nexport type Cart = {\r\n  id: number;\r\n  userId?: number | null;\r\n  items: CartItem[];\r\n};\r\n\r\nexport type Unidad = { id: number; nombre: string };\r\nexport type Marca  = { id: number; nombre: string };\r\nexport type Category = { id: number; name: string; slug: string; parentId?: number | null; children?: Category[] };\r\nexport type ProductImage = { id: number; productId: number; base64: string; alt?: string | null; position: number };\r\nexport type Review = { id: number; productId: number; userId: number; rating: number; comment?: string | null };\r\n\r\nexport type ApiOk<T> = { status?: number | string; message: string; result: T };\r\nexport type Paginated<T> = { products?: T[]; totalPages: number; totalProducts: number };\r\n"
    },
    "service": {
      "addresses": {
        "addresses.service.ts": "import { http } from \"@/lib/http\";\r\nimport type { ApiOk, Address } from \"@/lib/types\";\r\nimport { UpsertAddressDto } from \"./dto\";\r\n\r\nexport const AddressesService = {\r\n  async list() {\r\n    const { data } = await http.get<ApiOk<Address[]>>(\"/addresses\");\r\n    return data.result;\r\n  },\r\n  async create(body: UpsertAddressDto) {\r\n    const { data } = await http.post<ApiOk<Address>>(\"/addresses\", body);\r\n    return data.result;\r\n  },\r\n  async update(id: number, body: UpsertAddressDto) {\r\n    const { data } = await http.patch<ApiOk<Address>>(`/addresses/${id}`, body);\r\n    return data.result;\r\n  },\r\n  async remove(id: number) {\r\n    const { data } = await http.delete<ApiOk<{ id: number }>>(`/addresses/${id}`);\r\n    return data.result;\r\n  },\r\n};\r\n",
        "dto.ts": "export type UpsertAddressDto = {\r\n  fullName: string;\r\n  phone: string;\r\n  line1: string;\r\n  line2?: string;\r\n  city: string;\r\n  state?: string;\r\n  zip?: string;\r\n  isDefault?: boolean;\r\n};\r\n"
      },
      "auth": {
        "auth.service.ts": "import { http } from \"@/lib/http\";\r\nimport type { ApiOk, User } from \"@/lib/types\";\r\nimport { notifyAuthChange } from \"@/lib/auth-bus\";\r\n\r\nexport type AuthResult = { token: string; user: User };\r\n\r\nexport const AuthService = {\r\n  async login(body: { email: string; password: string }) {\r\n    const { data } = await http.post<ApiOk<AuthResult>>(\"/auth/login\", body);\r\n    localStorage.setItem(\"jwt_token\", data.result.token);\r\n    notifyAuthChange({ type: \"login\", token: data.result.token }); // 👈\r\n    return data.result;\r\n  },\r\n\r\n  async register(body: { username: string; email: string; password: string }) {\r\n    const { data } = await http.post<ApiOk<AuthResult>>(\"/auth/register\", body);\r\n    localStorage.setItem(\"jwt_token\", data.result.token);\r\n    notifyAuthChange({ type: \"login\", token: data.result.token }); // 👈\r\n    return data.result;\r\n  },\r\n\r\n  async validate() {\r\n    const { data } = await http.get<{ status: string; message: string; user: User }>(\"/auth/validate\");\r\n    return data.user;\r\n  },\r\n\r\n  logout() {\r\n    localStorage.removeItem(\"jwt_token\");\r\n    notifyAuthChange({ type: \"logout\" }); // 👈\r\n  },\r\n};\r\n",
        "dto.ts": "export type LoginDto = { email: string; password: string };\r\nexport type RegisterDto = { username: string; email: string; password: string };\r\n"
      },
      "cart": {
        "cart.service.ts": "import { http } from \"@/lib/http\";\r\nimport type { ApiOk, Cart } from \"@/lib/types\";\r\n\r\nexport const CartService = {\r\n  async get() {\r\n    const { data } = await http.get<ApiOk<Cart>>(\"/cart\");\r\n    return data.result;\r\n  },\r\n  async addItem(body: import(\"./dto\").AddItemDto) {\r\n    const { data } = await http.post<ApiOk<any>>(\"/cart/items\", body);\r\n    return data.result;\r\n  },\r\n  async updateItem(productId: number, body: import(\"./dto\").UpdateItemDto) {\r\n    const { data } = await http.patch<ApiOk<any>>(`/cart/items/${productId}`, body);\r\n    return data.result;\r\n  },\r\n  async removeItem(productId: number) {\r\n    const { data } = await http.delete<ApiOk<any>>(`/cart/items/${productId}`);\r\n    return data.result;\r\n  },\r\n  async checkout(body: import(\"./dto\").CheckoutDto) {\r\n    const { data } = await http.post<ApiOk<any>>(\"/cart/checkout\", body);\r\n    return data.result;\r\n  },\r\n};\r\n",
        "dto.ts": "export type AddItemDto = { productId: number; qty: number };\r\nexport type UpdateItemDto = { qty: number };\r\nexport type CheckoutDto = { addressId?: number };\r\n"
      },
      "catalog": {
        "catalog.service.ts": "import { http } from \"@/lib/http\";\r\nimport type { Unidad, Marca, Category, ProductImage, Review } from \"@/lib/types\";\r\nimport { AddImageDto, AddReviewDto, CreateCategoryDto, CreateMarcaDto, CreateUnidadDto } from \"./dto\";\r\n\r\nexport const CatalogService = {\r\n  async createUnidad(body: CreateUnidadDto) {\r\n    const { data } = await http.post<{ status: number; message: string; result: Unidad }>(\"/catalog/unidad\", body);\r\n    return data.result;\r\n  },\r\n  async listUnidad() {\r\n    const { data } = await http.get<{ status: number; message: string; result: Unidad[] }>(\"/catalog/unidad\");\r\n    return data.result;\r\n  },\r\n\r\n  async createMarca(body: CreateMarcaDto) {\r\n    const { data } = await http.post<{ status: number; message: string; result: Marca }>(\"/catalog/marca\", body);\r\n    return data.result;\r\n  },\r\n  async listMarca() {\r\n    const { data } = await http.get<{ status: number; message: string; result: Marca[] }>(\"/catalog/marca\");\r\n    return data.result;\r\n  },\r\n\r\n  async createCategory(body: CreateCategoryDto) {\r\n    const { data } = await http.post<{ status: number; message: string; result: Category }>(\"/catalog/category\", body);\r\n    return data.result;\r\n  },\r\n  async listCategories() {\r\n    const { data } = await http.get<{ status: number; message: string; result: Category[] }>(\"/catalog/category\");\r\n    return data.result;\r\n  },\r\n\r\n  async addImage(body: AddImageDto) {\r\n    const { data } = await http.post<{ status: number; message: string; result: ProductImage }>(\"/catalog/product-images\", body);\r\n    return data.result;\r\n  },\r\n  async listImages(productId: number) {\r\n    const { data } = await http.get<{ status: number; message: string; result: ProductImage[] }>(\"/catalog/product-images\", { params: { productId } });\r\n    return data.result;\r\n  },\r\n\r\n  async addReview(body: AddReviewDto) {\r\n    const { data } = await http.post<{ status: number; message: string; result: Review }>(\"/catalog/reviews\", body);\r\n    return data.result;\r\n  },\r\n  async listReviews(productId: number) {\r\n    const { data } = await http.get<{ status: number; message: string; result: Review[] }>(\"/catalog/reviews\", { params: { productId } });\r\n    return data.result;\r\n  },\r\n};\r\n",
        "dto.ts": "export type CreateUnidadDto = { nombre: string };\r\nexport type CreateMarcaDto  = { nombre: string };\r\nexport type CreateCategoryDto = { name: string; slug: string; parentId?: number };\r\nexport type AddImageDto = { productId: number; base64: string; alt?: string; position?: number };\r\nexport type AddReviewDto = { productId: number; rating: number; comment?: string };\r\n"
      },
      "product-container": {
        "dto.ts": "export type CreateProductContainerDto = { name: string; userId: number };\r\n",
        "product-container.service.ts": "import { http } from \"@/lib/http\";\r\nimport type { ProductContainer } from \"@/lib/types\";\r\nimport { CreateProductContainerDto } from \"./dto\";\r\n\r\nexport const ProductContainerService = {\r\n  async create(body: CreateProductContainerDto) {\r\n    const { data } = await http.post<ProductContainer>(\"/product-container\", body);\r\n    return data;\r\n  },\r\n  async mine() {\r\n    const { data } = await http.get<ProductContainer[]>(\"/product-container\");\r\n    return data;\r\n  },\r\n};\r\n"
      },
      "products": {
        "dto.ts": "\r\nexport type CreateProductDto = {\r\n  name: string;\r\n  sku: string;\r\n  quantity: number;\r\n  price: number;\r\n  containerId?: number | null;\r\n  unidadId?: number | null;\r\n  marcaId?: number | null;\r\n  categoryIds?: number[];\r\n  images?: { base64: string; alt?: string; position?: number }[];\r\n  minStock?: number;\r\n  isActive?: boolean;\r\n};\r\n\r\nexport type ListQuery = { limit?: number; offset?: number };\r\nexport type MatchQuery = { name: string };\r\n",
        "product.service.ts": "import { http } from \"@/lib/http\";\r\nimport type { ApiOk, Paginated, Product } from \"@/lib/types\";\r\nimport type { CreateProductDto, ListQuery } from \"./dto\";\r\n\r\nconst PRODUCTS = \"/products\";\r\nconst PRODUCTS_MATCH = \"/products/match\";\r\nconst PRODUCTS_MINE = \"/products/user\";\r\nconst PRODUCTS_ADMIN = \"/products/admin\";\r\n\r\nexport const ProductsService = {\r\n  async list(params: ListQuery = { limit: 12, offset: 0 }) {\r\n    const { data } = await http.get<ApiOk<Paginated<Product>>>(PRODUCTS, { params });\r\n    return data.result;\r\n  },\r\n\r\n  async search(name: string) {\r\n    const { data } = await http.get<ApiOk<Paginated<Product>>>(PRODUCTS_MATCH, { params: { name } });\r\n    return data.result;\r\n  },\r\n\r\n  async listMine(params: ListQuery = { limit: 20, offset: 0 }) {\r\n    const { data } = await http.get<ApiOk<Paginated<Product>>>(PRODUCTS_MINE, { params });\r\n    return data.result;\r\n  },\r\n\r\n  async listAdmin(params: ListQuery = { limit: 20, offset: 0 }) {\r\n    const { data } = await http.get<ApiOk<Paginated<Product>>>(PRODUCTS_ADMIN, { params });\r\n    return data.result;\r\n  },\r\n\r\n  async getById(id: string | number) {\r\n    const { data } = await http.get<ApiOk<Product>>(`${PRODUCTS}/${id}`);\r\n    return data.result;\r\n  },\r\n\r\n  async create(body: CreateProductDto) {\r\n    const { data } = await http.post<ApiOk<Product>>(PRODUCTS, body);\r\n    return data.result;\r\n  },\r\n\r\n  async update(id: string | number, body: Partial<CreateProductDto>) {\r\n    const { data } = await http.put<ApiOk<Product>>(`${PRODUCTS}/${id}`, body);\r\n    return data.result;\r\n  },\r\n\r\n  async remove(id: string | number) {\r\n    const { data } = await http.delete<ApiOk<{ deleted: boolean }>>(`${PRODUCTS}/${id}`);\r\n    return data.result;\r\n  },\r\n\r\n  \r\n};\r\n"
      },
      "users": {
        "dto.ts": "export type UsersByRoleDto = { role: \"ADMIN\" | \"SELLER\" | \"BUYER\" };\r\n",
        "users.service.ts": "import { http } from \"@/lib/http\";\r\nimport type { ApiOk, User } from \"@/lib/types\";\r\nimport { UsersByRoleDto } from \"./dto\";\r\n\r\nexport const UsersService = {\r\n  async all() {\r\n    const { data } = await http.get<ApiOk<User[]>>(\"/users/all\");\r\n    return data.result;\r\n  },\r\n  async byRole(role: UsersByRoleDto[\"role\"]) {\r\n    const { data } = await http.get<ApiOk<User[]>>(\"/users/by-role\", { params: { role } });\r\n    return data.result;\r\n  },\r\n  async remove(id: number) {\r\n    const { data } = await http.delete<ApiOk<User>>(`/users/${id}`);\r\n    return data.result;\r\n  },\r\n};\r\n"
      }
    }
  }
}